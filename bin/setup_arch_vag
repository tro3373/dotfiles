#!/usr/bin/env bash

readonly script_dir=$(
  cd "$(dirname ${BASH_SOURCE:-$0})"
  pwd
)
bootstrapf=/etc/bootstrapped
# has() { command -v ${1} >&/dev/null; }

initialize() {
  if test -f $bootstrapf; then
    return 1
  fi
  #set -e
  return 0
}
finalize() {
  date | sudo tee $bootstrapf >/dev/null
}

setup_eth1_rules() {
  local net_rule=/etc/udev/rules.d/66-persistent-net.rules
  if sudo grep eth1 $net_rule >/dev/null; then
    return
  fi
  local mac=$(cat /sys/class/net/enp0s8/address)
  cat <<EOF | sudo tee -a $net_rule >/dev/null
# from enp0s8 to eth1
SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="$mac", NAME="eth1"
EOF

}

setup_eth1() {
  setup_eth1_rules
  if sudo test -e /etc/netctl/eth1; then
    return
  fi
  cat <<EOF | sudo tee /etc/netctl/eth1 >/dev/null
Connection=ethernet
Description='A basic static ethernet connection'
Interface=eth1
IP=static
Address=('192.168.33.10/24')
EOF
}

setup_eth0() {
  if sudo test -e /etc/netctl/eth0; then
    sudo rm /etc/netctl/eth0
  fi
  if test -L /etc/systemd/system/multi-user.target.wants/netctl@eth0.service; then
    sudo systemctl disable netctl@eth0.service
  fi
}

setup_network() {
  setup_eth1
  setup_eth0
}

setup_lang_locale() {
  echo "==> setupping lang locale .."
  local val="Asia/Tokyo"
  if ! timedatectl | grep "Time zone" | grep "$val" >/dev/null; then
    sudo timedatectl set-timezone Asia/Tokyo # タイムゾーン設定
  fi
  if backup /etc/locale.conf; then
    cat <<'EOF' | sudo tee /etc/locale.conf >/dev/null
LANG=en_US.UTF8
LC_NUMERIC=en_US.UTF8
LC_TIME=en_US.UTF8
LC_MONETARY=en_US.UTF8
LC_PAPER=en_US.UTF8
LC_MEASUREMENT=en_US.UTF8
EOF
  fi
  if backup /etc/locale.gen; then
    cat <<EOF | sudo tee /etc/locale.gen >/dev/null
en_US.UTF-8 UTF-8
ja_JP.UTF-8 UTF-8
EOF
    sudo locale-gen
  fi
}

setup_samba() {
  if ! has samba; then
    sudo yay -S samba --noconfirm
  fi
  if sudo test -e /etc/samba/smb.conf; then
    return
  fi
  sudo wget "https://git.samba.org/samba.git/?p=samba.git;a=blob_plain;f=examples/smb.conf.default;hb=HEAD" -O /etc/samba/smb.conf.org
  cat <<EOF | sudo tee -a /etc/samba/smb.conf >/dev/null
[global]
    # TBD ファイルを使用
    passdb backend = tdbsam
    # アーカイブ属性と実行属性を相互変換しない
    map archive = no
    unix charset = UTF-8
    dos charset = CP932

    #workgroup = WORKGROUP
    #local master = yes
    #unix password sync = yes

    interfaces = 127.0.0.0/8 eth0
    bind interfaces only = yes
    hosts allow = 127. 192.168.33.0/24
    hosts deny = all

    security = user
    dns proxy = no
    map to guest = Bad User
    create mode = 0664
    guest account = vagrant
    directory mode = 0775
[share]
   path = /home/vagrant
   writeable = true
   force user = vagrant
   force group = vagrant
   public = true
   # public の alias
   guest ok = yes
   guest only = yes

EOF
  #sudo smbpasswd vagrant
  sudo chmod 755 /home/vagrant
  sudo systemctl enable smb nmb
  sudo systemctl start smb nmb
}

setup_yay() {
  if has yay; then
    return
  fi
  mkdir tmp
  cd tmp
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si --noconfirm
}

setup_yaourt() {
  if ! has yaourt; then
    sudo pacman -S --noconfirm yaourt
  fi
  if ! has reflector; then
    sudo pacman -S --noconfirm reflector
  fi
  if backup /etc/pacman.d/mirrorlist; then
    sudo reflector --verbose --country 'Japan' -l 10 --sort rate --save /etc/pacman.d/mirrorlist
  fi
  yaourt -Syua --noconfirm
}
steup_powerpill() {
  if ! has powerpill; then
    gpg --recv-keys --keyserver hkp://pgp.mit.edu 1D1F0DC78F173680
    yaourt -S --noconfirm powerpill # Use powerpill instead of pacman. Bye pacman...
  fi
  ### =================powerpill SigLevel書き換え===================
  if backup /etc/pacman.conf; then
    sudo sed -i -e 's/Required DatabaseOptional/PackageRequired/' /etc/pacman.conf
  fi
  # パッケージ更新
  sudo powerpill -Syu --noconfirm
}

setup_screenfetch() {
  sudo pacman -S --noconfirm screenfetch
  cat <<EOF | sudo tee /etc/profile.d/screenfetch.sh >/dev/null
#!/usr/bin/env bash

screenfetch
EOF
  sudo chmod 775 /etc/profile.d/screenfetch.sh
}
setup_neofetch() {
  sudo pacman -S --noconfirm neofetch
  cat <<EOF | sudo tee /etc/profile.d/neofetch.sh >/dev/null
#!/usr/bin/env bash

neofetch
EOF
  sudo chmod 775 /etc/profile.d/neofetch.sh
}

setup_packages() {
  echo "==> setupping packages .."
  # # パッケージ更新が X用のパッケージが邪魔してできないので、先にアンインストール
  # sudo pacman -R --noconfirm xorg-fonts-misc xorg-font-utils xorg-server xorg-server-common xorg-bdftopcf libxfont libxfont2

  if false; then
    ## see https://dev.to/mattdark/signature-is-unknown-trust-arch-linux-on-vbox-3452
    sudo rm -r /etc/pacman.d/gnupg
    sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring
    sudo pacman-key --init
    sudo pacman-key --populate archlinux manjaro
    sudo pacman-key --refresh-keys
    sudo pacman -Sc # delete all packages that not installed
  else
    ## error occur. see https://bbs.archlinux.org/viewtopic.php?id=253809
    ## execute below in windows..
    # bcdedit /set hypervisorlaunchtype off

    sudo rm -r /etc/pacman.d/gnupg
    sudo pacman-key --init
    sudo pacman-key --populate archlinux
    sudo pacman -Sy gnupg --noconfirm
    sudo pacman -Sy archlinux-keyring --noconfirm
    sudo pacman-key --refresh-keys
    ## Error but ok
    # gpg: refreshing 120 keys from hkps://hkps.pool.sks-keyservers.net
    # gpg: keyserver refresh failed: General error
    # ==> ERROR: A specified local key could not be updated from a keyserver.
    sudo pacman -Sc # delete all packages that not installed
  fi

  # パッケージ更新
  sudo pacman -Syyu --noconfirm
  sudo pacman -S --noconfirm libxfont2
  # pacman cache clean
  sudo pacman -S pacman-contrib

  # setup_yaourt
  # setup_powerpill
  setup_yay

  # for clipboard
  sudo yay -S --noconfirm xsel
  sudo yay -S --noconfirm xorg-server-xvfb

  # setup samba
  setup_samba

  # setup_screenfetch
  setup_neofetch

  # =================GUI環境===================
  # sudo pacman -S --noconfirm xorg-xinit lightdm-gtk-greeter
  # sudo pacman -S --noconfirm xorg-xinit
  # sudo pacman -S --noconfirm lightdm-gtk-greeter
  # yes 'all' | sudo pacman -S --noconfirm xfce4 lightdm
  # sudo pacman -S --noconfirm xfce4 lightdm
  # sudo pacman -S --noconfirm xfce4
  # sudo systemctl enable lightdm.service
  # ## /etc/systemd/system/default.targetのリンクをmulti-user.targetからgraphical.targetに変える
  # sudo systemctl set-default graphical.target
  ## =================フォントとインプットメソッドのインストール===================
  # yaourt -S --noconfirm otf-takao
  # yes 'all' | sudo pacman -S --noconfirm fcitx-im fcitx-configtool fcitx-mozc
  # sudo pacman -S --noconfirm fcitx-im fcitx-configtool fcitx-mozc
  # sudo cat << 'EOF' > ${HOME}/.xprofile
  # export GTK_IM_MODULE=fcitx
  # export QT_IM_MODULE=fcitx
  # export XMODIFIERS=”@im=fcitx”
  # EOF
  # ## =================自動ログイン===================
  # sudo cat /etc/lightdm/lightdm.conf |
  #    sudo sed -e 's/#autologin-user=/autologin-user=vagrant/' |
  #        sudo tee /etc/lightdm/lightdm.conf
  # sudo groupadd -r autologin
  # sudo gpasswd -a vagrant autologin
  # ↑一回目のログインはユーザー名とパスワード(どちらもvagrnat)打たないといけない
  # =====================dockerセットアップ==========================
  #sudo pacman -S --noconfirm docker  # dockerインストール
  #sudo systemctl enable docker  # ログイン時にデーモン実行
  #sudo groupadd docker  # sudoなしで使えるようにする設定
  #sudo gpasswd -a vagrant docker  # sudoなしで使えるようにする設定
  #sudo systemctl restart docker
  # =================その他好きなもの===================
  # yaourt -S --noconfirm man-pages-ja-git  # 日本語man
  # sudo pacman -S --noconfirm fzf  # Simplistic interactive filtering tool
  # sudo pacman -S --noconfirm thefuck  # Corrects your previous console command
  # sudo pacman -S --noconfirm atool  # Managing file archives of various types
  # yaourt -S --noconfirm gitflow-avh-git  # git-flow tools
  # sudo pacman -S --noconfirm python-pygments pygmentize  # Python syntax highlighter
}
setup_dots() {
  echo "==> setupping .dot .."
  [[ -e ~/.dot ]] && return
  curl -fSsL git.io/tr3s | bash
  cd ~/.dot/bin
  ./setup -e
}
setup_login_shell() {
  echo "==> setupping login shell .."
  ! has zsh && return
  sudo chsh vagrant -s /usr/bin/zsh
}
main() {
  source ./lib/setup_funcs
  source ./lib/arch/funcs
  tool_env

  set -eu
  dry_run=0
  debug=1

  ! initialize && return
  # setup_network
  # # setup_keyboard
  # setup_lang_locale
  # setup_packages
  # setup_login_shell
  # setup_dots
  # finalize
  # echo "==> Done."
  # echo "===> sudo reboot"
  # # TODO logout and set -e off
}
main
