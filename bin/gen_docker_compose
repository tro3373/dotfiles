#!/usr/bin/env bash

cat_compose() {
  cat <<'EOF'
version: '3.7'
services:
  db:
    image: mongo:latest
  app:
    image: app:1.0.0
    build:
      context: ./src
    container_name: app
    links:
      - db:db
    command: 'tail -f /dev/null'
    working_dir: /works/
    volumes:
      #- /etc/localtime:/etc/localtime
      - ./src/:/works/
    environment:
      - TZ=Asia/Tokyo
EOF
}
cat_makefile() {
  cat <<'EOF'
CONTAINERNAME=app
VERSION=1.0.0
all_container=$$(docker ps -a -q)
active_container=$$(docker ps -q)
images=$$(docker images | awk '/^<none>/ { print $$3 }')
#.PHONY: all test clean

default: build
build:
	docker-compose build

up: start
start:
	docker-compose up -d && docker-compose logs
stop: down
down:
	# docker-compose stop && docker-compose rm -fv
	docker-compose down
restart: stop start

console: attach
attach:
  docker exec -it $(CONTAINERNAME) /bin/bash --login
do:
  docker exec -it $(CONTAINERNAME) /works/app

logs:
	docker-compose logs
logsf:
	docker-compose logs -f

clean: clean_container clean_images
clean_images:
	@if [ "$(images)" != "" ] ; then \
		docker rmi $(images); \
	fi
clean_container:
	@for a in $(all_container) ; do \
		for b in $(active_container) ; do \
			if [ "$${a}" = "$${b}" ] ; then \
				continue 2; \
			fi; \
		done; \
		docker rm $${a}; \
	done
EOF
}

main() {
  cat_compose | gen ./docker-compose.yml
  cat_makefile | gen ./Makefile
}
main "$@"
