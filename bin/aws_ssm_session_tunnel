#!/usr/bin/env bash

readonly command_name=$(basename $0)
readonly port_mysql=3306
readonly port_mongo=27017

mode=
profile=
remote=
ec2_id=
region=ap-northeast-1
db_host=localhost

wrap_aws=
local_ssh_port=
pid_443=
pid_80=

args=()
usage() {
  cat <<EOF

Tunnel http/https or mysql port forwarding Using AWS System Manager Session Manager

Usage:
  $command_name [option]
Options
  -h|--help               : Show this usage
  -p|--profile <profile>  : AWS profile
  --region <region>       : Specify region. default is ap-northeast-1
  -r|--remote <bastion>   : SSH Remote host name defined in .ssh/config use for ssh port forward.
    Ex) Sample .ssh/config settings.
      Host bastion
        User user_name
        HostName localhost
        Port 10022
        IdentityFile ~/.ssh/id_rsa
  -i|--id <ec2_id>        : EC2 id to connect to.
  -m|--mode [http|mysql|mongo]  :
    http: tunnel http/https port
    mysql: tunnel mysql($port_mysql) port
    mongo: tunnel mongodb($port_mongo) port
  -d|--db <db_host>       : Database Host/Proxy name. Use in mysql/mongo mode.

EOF
}
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      -m | --mode) shift && mode=$1 ;;
      -p | --profile) shift && profile=$1 ;;
      -r | --remote) shift && remote=$1 ;;
      -i | --id) shift && ec2_id=$1 ;;
      --region) shift && region=$1 ;;
      -d | --db) shift && db_host=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  setup_wrap_aws
  detect_local_ssh_port
  check
}

setup_wrap_aws() {
  if [[ $TERM_PROGRAM == mintty ]]; then
    wrap_aws=winpty
  elif has aws-vault; then
    wrap_aws="aws-vault exec $profile --"
  fi
}

detect_local_ssh_port() {
  local ssh_cnf=$HOME/.ssh/config
  local key="Host $remote"
  local n=$(grep -E -n "^$key$" $ssh_cnf | cut -d: -f1)
  if [[ -z $n ]]; then
    log "No ssh config settings for $remote exist."
    exit 1
  fi
  local p=$(tail -n +$n $ssh_cnf | grep Port | head -1 | awk '{print $2}')
  if [[ -z $p ]]; then
    log "No ssh config for 'Port' settings for $remote exist."
    exit 1
  fi
  local_ssh_port=$p
}

check() {
  if ! has aws; then
    log "No aws command exist."
    exit 1
  fi
  if ! has session-manager-plugin; then
    log "No session-manager-plugin command exist."
    exit 1
  fi
  if [[ -z $local_ssh_port ]]; then
    log "Empty local ssh port error."
    exit 1
  fi
  # shellcheck disable=SC2154
  if is_port_useing $local_ssh_port; then
    log "Aready $local_ssh_port used."
    exit 1
  fi
  if [[ $TERM_PROGRAM != mintty ]]; then
    if ! has gost; then
      log "No gost command exist."
      exit 1
    fi
  fi
  if [[ -n $mode && ! $mode =~ ^(http|mysql|mongo)$ ]]; then
    log "No such mode $mode exist."
    exit 1
  fi
}

add_args() { args+=("$@"); }
has() { command -v ${1} >&/dev/null; }
ink() {
  local stdin=
  if [[ -p /dev/stdin ]]; then
    stdin="$(cat <&0)"
  fi
  if [[ $# -eq 0 && -z $stdin ]]; then
    return
  fi

  local open="\033["
  local close="${open}0m"
  export black="0;30m"
  export red="1;31m"
  export green="1;32m"
  export yellow="1;33m"
  export blue="1;34m"
  export purple="1;35m"
  export cyan="1;36m"
  export gray="0;37m"
  export white="$close"

  local text="$stdin$*"
  local color="$close"

  case $1 in
    black | red | green | yellow | blue | purple | cyan | gray | white)
      eval color="\$$1"
      text="$stdin${*:2}"
      ;;
  esac

  printf "${open}${color}${text}${close}\n" 1>&2
}
log() { echo "$(date +"%Y-%m-%d %H:%M:%S") $*" | ink yellow; }
is_port_useing() { netstat -ano | grep LISTEN | grep ":$1" >&/dev/null; }

wait_and_tunnel_https() {
  wait_until_port_used $local_ssh_port
  tunnel_https
}

wait_until_port_used() {
  while true; do
    is_port_useing $1 && break
    # log "=> Waiting 2s for forwarding port $1.."
    sleep 2
  done
}

end() {
  if [[ -n $pid_443 ]]; then
    kill $pid_443 2>/dev/null && log "==> Killed PID($pid_443) use port 443.."
  fi
  if [[ -n $pid_80 ]]; then
    kill $pid_80 2>/dev/null && log "==> Killed PID($pid_80) use port 80.."
  fi
}

tunnel_https() {
  # shellcheck disable=SC2154
  log
  log "==> PortForwarding $remote:80,443 to localhost:80,443.. Press Ctrl+C to exit"
  log
  if [[ $TERM_PROGRAM == mintty ]]; then
    # shellcheck disable=SC2154
    ssh -g -N -C -L 443:localhost:443 $remote &
    ssh -g -N -C -L 80:localhost:80 $remote &
    return
  fi

  {
    ssh -g -N -C -L 1443:localhost:443 $remote &
    sudo gost -L=tcp://:443/127.0.0.1:1443
  } &
  pid_443=$!

  {
    ssh -g -N -C -L 18080:localhost:80 $remote &
    sudo gost -L=tcp://:80/127.0.0.1:18080
  } &
  pid_80=$!

  # log "==> 443PID:$pid_443 80PID:$pid_80 !!"
  # 0 プロセス終了時に、プロセスが自分自身に対して送出する EXIT シグナル。
  # 1 XWindow のクローズや、デーモンのリセットに使用されるハングアップシグナル。
  # 2 Ctrl+C や Del キーを押したときに発生する割り込みシグナル。
  # 3 Ctrl+\ を押したときに発生するクイットシグナル。
  # 9 プロセスを強制終了するためのキルシグナル。強制終了なので当然、trap はできない。
  #15 プロセスを終了させるための終了シグナル。kill コマンドはデフォルトでこのシグナルを使用する (つまり kill PID は kill -15 PID と同じ結果になる)。
  trap end 0 1 2 3 15
  wait
}

find_not_used_local_port() {
  local port=$1
  local max=5
  local count=0
  while true; do
    count=$((count + 1))
    [[ $count -gt $max ]] && break
    is_port_useing $port || break
    log "Aready $port used. Checking other port.."
    port=$((port + 1))
  done
  echo $port
}

wait_and_tunnel_db() {
  local r_port=$1
  local scan_from_port=$r_port
  wait_until_port_used $local_ssh_port
  local l_port=$(find_not_used_local_port $scan_from_port)
  tunnel_db $r_port $l_port
}

tunnel_db() {
  local r_port=$1
  local l_port=$2
  # shellcheck disable=SC2154
  local log_db_host=
  if [[ $db_host != localhost ]]; then
    log_db_host="$db_host:"
  fi
  log
  log "==> PortForwarding ${log_db_host}$r_port to localhost:$l_port via $remote.. Press Ctrl+C to exit"
  log
  # shellcheck disable=SC2154
  ssh -g -N -L $l_port:$db_host:$r_port $remote
}

start_ssm_session() {
  log "==> Wating start ssm session..."
  local opt_prof="--profile $profile"
  [[ $wrap_aws =~ ^aws-vault.* ]] && opt_prof=
  # shellcheck disable=SC2154
  export GPG_TTY=$(tty)
  $wrap_aws aws \
    $opt_prof \
    --region $region \
    ssm start-session \
    --target $ec2_id \
    --document-name AWS-StartPortForwardingSession \
    --parameters "{\"portNumber\":[\"22\"],\"localPortNumber\":[\"$local_ssh_port\"]}"
}

start_wait_and_tunnel_if_needed() {
  [[ -z $mode ]] && return
  if [[ $mode == http ]]; then
    wait_and_tunnel_https &
  else
    local p=$port_mongo
    if [[ $mode == mysql ]]; then
      p=$port_mysql
    fi
    wait_and_tunnel_db $p &
  fi
}

main() {
  initialize "$@"
  start_wait_and_tunnel_if_needed
  start_ssm_session
  wait
}
main "$@"
