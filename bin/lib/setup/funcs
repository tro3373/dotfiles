#!/bin/bash

bootstrapped_path=/etc/bootstrapped && readonly bootstrapped_path
_timestamp=$(date +%Y%m%d.%H%M%S) && readonly _timestamp

readonly _core_apps=(
  git ssh tig curl bc tree tmux fzf zsh vim ag rg ctags
)
readonly _core_apps_additional=(
  lsof neofetch anyenv netcat go goimports pt nvim nvr mmv gomi ghq shellcheck shfmt
  htop hub exa bat nkf sheldon
)
readonly _core_apps_additional_arch=(
  yay
)
# Dynamic Variables
export debug=0
export dry_run=1
export tran=0
export force=0
export additional=0
export minimal=0
export view=0
args=()
# shellcheck disable=SC2034
dependency_args=()
_funcs_initialized=0

add_args() { args+=("$@"); }
add_dependency_args() {
  # shellcheck disable=SC2001,SC2207,SC2154
  log "===> Adding dependency args $* for $app.."
  dependency_args+=("$@" "$app")
}
is_debug() { [[ $debug -eq 1 ]]; }
is_dry() { [[ $dry_run -eq 1 ]]; }
is_additional() { [[ $additional -eq 1 ]]; }
is_force() { [[ $force -eq 1 ]]; }
_log() { echo -e "$(date +"%Y-%m-%d %H:%M:%S") ${*:2}" | ink "$1" 1>&2; }
log() { _log cyan "$*"; }
ilog() { _log green "$*"; }
elog() { _log red "$*"; }
dlog() { if is_debug; then _log yellow "$*"; fi; }
has() { command -v "${1}" >&/dev/null; }
hasp() { command -p -v "${1}" >&/dev/null; } # -p: Search command in default PATH entries
has_exclude_dot() { type -a "$1" 2>/dev/null | grep -v '.dot/bin/' | grep -q "$1"; }
has_scoop() { scoop list "$1" | grep -v matching | grep "$1" >&/dev/null; }
has_scoop_bucket() { scoop bucket list | grep "$1" &>/dev/null; }

# TODO change func name
isexist() { find "$*" >&/dev/null; }

is_arch() { [[ $DETECT_OS == "arch" ]]; }
is_arm() { uname -m | grep -E "(arm|aarch64)" >&/dev/null; }
is_x86_64() { uname -m | grep x86_64 >&/dev/null; }
is_msys() { [[ $DETECT_OS == "msys" ]]; }
is_wsl() { [[ -e /proc/version ]] && grep -qi microsoft /proc/version; }
is_cygwin() { [[ $DETECT_OS == "cygwin" ]]; }
is_mac() { [[ $DETECT_OS == "mac" ]]; }
is_ubuntu() { [[ $DETECT_OS == "ubuntu" ]]; }
is_redhat() { [[ $DETECT_OS == "redhat" ]]; }
is_win() { is_msys || is_cygwin; }
is_unix() { ! is_win; }
ink() {
  local stdin=
  if [[ -p /dev/stdin ]]; then
    stdin="$(cat <&0)"
  fi
  if [[ $# -eq 0 && -z $stdin ]]; then
    return
  fi

  local open="\033["
  local close="${open}0m"
  export black="0;30m"
  export red="1;31m"
  export green="1;32m"
  export yellow="1;33m"
  export blue="1;34m"
  export purple="1;35m"
  export cyan="1;36m"
  export gray="0;37m"
  export white="$close"

  local text="$stdin$*"
  local color="$close"

  case $1 in
    black | red | green | yellow | blue | purple | cyan | gray | white)
      eval color="\$$1"
      # text="$stdin${*:2}"
      text=$(echo -e "$stdin${*:2}" | sed -e 's,%,%%,g')
      ;;
  esac

  # shellcheck disable=SC2059
  printf "${open}${color}${text}${close}\n" 1>&2
}
_usage() {
  if type -t usage; then
    usage
    return
  fi
  # shellcheck disable=SC2154
  if [[ -n $command_name ]]; then
    echo "$command_name command"
    return
  fi
  echo "This is funcs usage. define usage method."
}

initialize_args() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) _usage && exit 0 ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      -e | --exec) dry_run=0 ;;
      -v | --view) view=1 ;;
      -f | --force) force=1 ;;
      -a | --additional) additional=1 ;;
      -m | --minimal) minimal=1 ;;
      -d | --debug) debug=1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
}

set_default_install_command() {
  export def_install_cmd="sudo apt install -y"
  if is_mac; then
    def_install_cmd="brew install"
  elif is_redhat; then
    def_install_cmd="sudo yum install -y"
  elif is_cygwin; then
    def_install_cmd="apt-cyg install"
  elif is_msys; then
    def_install_cmd="pacman -S --noconfirm"
  elif is_arch; then
    if has yay; then
      def_install_cmd="yay -S --noconfirm"
    elif has yaourt; then
      def_install_cmd="yaourt -S --noconfirm"
    else
      def_install_cmd="sudo pacman -S --noconfirm"
    fi
  fi
}

exe() {
  local cmd="$*"
  is_dry && log "   $cmd" && return
  dlog "===> Executing: $cmd"
  eval "$cmd" || (echo "===> Failed..... Executing $cmd" && exit 1)
}

exes() {
  local cmd="$*"
  is_dry && echo "\$($cmd)" && return
  exe "$@"
}

make_dir_if_needed() {
  local tmp="$*"
  if [[ ! -e $tmp ]]; then
    exe "mkdir -p \"$tmp\""
  fi
}

# $1のファイルを$2へリンクを作成する
make_link() {
  local from=$1
  local to=$2
  exe "ln -s \"$from\" \"$to\""
}

# $* のリンクを 絶対パスで表示する（readlink -f の代用（For Mac））
# echo 結果がパスとして使用される為、log 実行時は正しく動作しない
readlink_path() {
  local target="$*"
  if [ "$target" = "" ]; then
    echo "Error!!! readlink_path Error!!!!!!!! argument is blank!!"
    return
  fi
  buf="$target"
  pre=""
  while [ "$buf" != "" ]; do
    pre="$buf"
    buf="$(readlink "$buf")"
  done
  echo "$pre"
}

# $* ディレクトリ配下の dot file をHOMEへリンクを作成する
make_link_dot2home() {
  local dir="$*"
  for file in $(
    find "$dir" -maxdepth 1 -mindepth 1 -name "\.*" -exec basename {} \; |
      grep -v "^.git$" |
      grep -v "^.gitignore$" |
      grep -v "^.gitkeep$" |
      grep -E '^\.[^.]+'
  ); do
    make_lnk_with_bkup "$dir/$file" "${HOME}/$file"
  done
}

# 同じリンクかどうか
is_same_link() {
  local src1=$1
  local src2=$2
  if [ "$src1" = "$src2" ]; then
    return 1
  fi
  if [ "$src1/" = "$src2" ]; then
    return 1
  fi
  if [ "$src1" = "$src2/" ]; then
    return 1
  fi
  return 0
}

# $1のファイルを$2へリンクを作成する
make_lnk_with_bkup() {
  local src=$1
  local lnk=$2
  local need_backup=0
  # dlog " make_lnk_with_bkup Start lnk=$lnk src=$src"
  #if [ -e "${lnk}" ]; then
  if isexist "${lnk}"; then
    # dlog "   @@@@@@ exist!"
    # ファイルタイプ(ファイル、ディレクトリ、リンク)をチェック
    #if [ -n "`find "${lnk}" -maxdepth 0 -type l`" ]; then
    if [ -L "${lnk}" ]; then
      # リンク
      # dlog "   @@@@@@ Link!"
      local fullpath_lnk fullpath_src
      fullpath_lnk="$(readlink_path "${lnk}")"
      fullpath_src="$(readlink_path "${src}")"
      # dlog "    lnk:$lnk => fullpath_lnk=$fullpath_lnk"
      # dlog "    src:$src => fullpath_src=$fullpath_src"
      if ! is_same_link "$fullpath_lnk" "$fullpath_src"; then
        # 既に自分へのリンクの場合はなにもしない
        # dlog "  => Already linked. Skip it. path=${lnk}"
        return 0
      else
        # 他ファイルへのリンクなのでバックアップする
        # dlog "  => Not match link. backup it. old link is ${fullpath_lnk} => new link is ${fullpath_src}"
        need_backup=1
      fi
    elif [ -d "${lnk}" ]; then
      # ディレクトリはバックアップする
      # dlog "   @@@@@@ Dir!"
      dlog "  => Directory exist. Backup it. path=$lnk"
      need_backup=1
    elif [ -f "${lnk}" ]; then
      # 既存のファイルをバックアップする
      # dlog "   @@@@@@ File!"
      dlog "  => File exist. Backup it. path=$lnk"
      need_backup=1
    else
      # dlog "   @@@@@@ little bit!"
      # ないと思う
      dlog "  => Little bit strange exist. path=${lnk} ... Do nothing"
      return 0
    fi
  fi
  # バックアップが必要ならバックアップする
  if [ $need_backup -eq 1 ]; then
    # dlog "   @@@@@@ Backup!"
    backup_file "${lnk}"
  fi
  make_link "$src" "$lnk"
}

backup() {
  for f in "$@"; do
    sudo test ! -e "$f" && continue
    local dst=$f.org
    sudo test -e "$dst" && continue
    log "===> Backupping $f to $dst"
    exe sudo cp -rf "$f" "$dst"
  done
}

# $* のファイルを${_backup_root}に移動する
backup_file() {
  local _target="$*"
  # バックアップ先のディレクトリがない場合は作成する
  make_dir_if_needed "$_backup_root"

  local _name
  _name="$(basename "$_target")"
  # バックアップ先ディレクトリにmv
  exe "mv -fv \"$_target\" \"${_backup_root}/${_timestamp}_$_name\""
  del_if_exist "$_target"
  if [[ ! -e $_target ]]; then
    dlog "===> Backuped $_target"
  fi
}

# 存在する場合のみ削除
del_if_exist() {
  local rm_target="$*"
  if [ "$rm_target" = "/" ]; then
    log "invalid rm path $rm_target"
    return
  fi
  if isexist "$rm_target"; then
    exe "rm -rf \"$rm_target\""
  fi
}

has_cask() { brew list --cask | grep "$1" >&/dev/null; }
has_or_local_package() {
  has "$*" || has_local_package "$*"
}

has_local_package() {
  local p=$1
  if is_arch || is_msys; then
    pacman -Qi "$p" >&/dev/null && return 0
  elif is_ubuntu; then
    dpkg -l "$p" | grep -E '^ii' >&/dev/null && return 0
  elif is_redhat; then
    rpm -qi "$p" >&/dev/null && return 0
  elif is_mac; then
    set_brew_installed_pkgs_if_needed
    echo -e "$_brew_installed_pkgs" | grep -E "^$p$" >&/dev/null && return 0
  else
    return 1
  fi
}
def_install() {
  local _pkgs=() _opts=()
  set_brew_installed_pkgs_if_needed
  for p in "$@"; do
    if [[ $p =~ ^-.* ]]; then
      _opts+=("$p")
      continue
    fi
    if ! is_force; then
      has_or_local_package "$p" && continue
    fi
    _pkgs+=("$p")
  done
  [[ ${#_pkgs[@]} -eq 0 ]] && return
  # shellcheck disable=SC2154
  exe "$def_install_cmd" "${_opts[*]}" "${_pkgs[*]}"
}
set_brew_installed_pkgs_if_needed() {
  if ! is_mac || ! has brew || test -n "$_brew_installed_pkgs"; then
    return
  fi
  _brew_installed_pkgs=$(brew list -1 | grep -v '==')
}
make_work_if_needed() {
  make_dir_if_needed "$workdir"
}
cd_work() {
  make_work_if_needed
  exe "cd \"$workdir\""
}

github_latest_release_tag() {
  local _repo="$1"
  curl -fsSL "https://github.com/$_repo/tags" |
    grep -E "href=\"/$_repo/releases/tag/" |
    head -1 |
    sed -e 's,^.*href=,,g' |
    cut -d\" -f2 |
    sed -e "s,/$_repo/releases/tag/,,g"
}

_github() {
  local dst="$1"
  local url="$2"
  local tag="$3"
  local _sudo=""
  if ! is_win && [[ $dst =~ /usr/local/?.* ]]; then
    _sudo="sudo"
  fi
  local repo_name="${url##*/}"
  repo_name="${repo_name%%\.git}"
  local _path="$dst/$repo_name"
  if [[ -n $_sudo ]]; then
    if ! git config --global --get-all safe.directory | grep -e "^$_path$" >&/dev/null; then
      exe git config --global --add safe.directory "$_path"
    fi
  fi
  if [[ -e $_path ]]; then
    exe cd "$_path"
    log "==> Git pull rebasing .."
    exe $_sudo git pull --rebase
  else
    # ignore depth 1 option because tag info not readable
    # exe $_sudo git clone --depth 1 "$url" $_path
    log "==> Git cloning $url .."
    exe $_sudo git clone "$url" "$_path"
    exe cd "$_path"
  fi
  if [[ -z $tag ]]; then
    if ! is_dry; then
      local tag
      tag=$(git tag --list | tail -1 2>/dev/null)
    fi
    if [[ -z $tag ]]; then
      return
    fi
  fi
  if ! is_dry; then
    local now_branch
    now_branch=$(git branch | grep -E "\*" | tr -d "*" | tr -d " ")
  fi
  if [[ -n $now_branch && $now_branch != "$tag" ]]; then
    log "==> Git check outing $tag .."
    exe $_sudo git checkout -b "$tag" "$tag"
  fi
}
github_user_local() {
  _github /usr/local/src "$@"
}
github() {
  _github "$workdir" "$@"
}
dl() {
  local _url="$1"
  local _dst="$2"
  if [[ -e $_dst ]] && [[ ! -d $_dst ]]; then
    dlog "Already exists file $_dst"
    return
  fi
  if [[ $# -eq 1 ]]; then
    ! is_dry && log "===> Downloading from $_url"
    if has curl; then
      exe "curl -fLO \"$_url\""
    else
      exe "wget \"$_url\""
    fi
  else
    ! is_dry && log "===> Downloading from $_url to $_dst"
    if has curl; then
      exe "curl -fL \"$_url\" -o \"$_dst\""
    else
      exe "wget \"$_url\" -O \"$_dst\""
    fi
  fi
}

gsettings_if_needed() {
  local _scheme=$1
  local _path=$2
  local _val=$3
  if [[ -z $_val ]]; then
    _val=$_path
    _path=
  fi
  local _current=
  _current=$(gsettings get "$_scheme" "$_path")
  if [[ $_current == "$_val" ]]; then
    return
  fi
  exe gsettings set _scheme _path _val
}

is_empty_dir() {
  local _count
  _count=$(find "$1"/ -type d -empty 2>/dev/null | wc -l)
  test "$_count" -eq 1
}
dl_untar() {
  local url dst strip _fname _sudo _tar_opts
  url="$1"
  _fname="${url##*/}"
  dst="${2:-$workdir/${_fname%%.*}}"
  _sudo=""
  if ! is_win && [[ $dst =~ /usr/local/?.* ]]; then
    _sudo="sudo"
  fi
  strip=${3:-1}
  [[ -z $_fname ]] && _fname=dl.tgz
  cd_work
  dl "$url" "$_fname"
  if [[ ! -e $dst ]]; then
    exe $_sudo mkdir -p "$dst"
  fi
  if is_empty_dir "$dst"; then
    _tar_opts=xvfpz
    [[ $_fname =~ \.tbz$ ]] && _tar_opts=xvfpj
    # [[ $_fname =~ \.tgz$ ]] && _tar_opts=xvfpz
    # [[ $_fname =~ \.tar$ ]] && _tar_opts=xvf
    # [[ $_fname =~ \.tar\.gz$ ]] && _tar_opts=xvfpz
    # [[ $_fname =~ \.tar\.bz2$ ]] && _tar_opts=xvjfp
    # [[ $_fname =~ \.tar\.xz$ ]] && _tar_opts=xvJfp
    # [[ $_fname =~ \.tar\.Z$ ]] && _tar_opts=xvZfp
    # [[ $_fname =~ \.zip$ ]] && _tar_opts=xvfp
    exe "$_sudo tar $_tar_opts $_fname -C \"$dst\" --strip-components $strip"
  fi
}
dl_unzip() {
  local url="$1"
  local to="${2:-$workdir}"
  cd_work
  dl "$url" dl.zip
  exe "unzip dl.zip -d \"$to\""
  log "==> Unzipped"
}

tool_env() {
  set -eu
  dry_run=0
  debug=1
  # shellcheck disable=SC2154
  workdir=$script_dir/tmp
}

rm_dotpath() {
  local _target=~/.cache/zsh/path
  if [[ -e $_target ]]; then
    log "==> Removing $_target .."
    exe rm "$_target"
  fi
}

find_trans() {
  local trans_dir=$script_dir/lib/setup/trans
  if [[ $1 == -l ]]; then
    find "$trans_dir"/ -maxdepth 1 -mindepth 1 -type f -exec basename {} \; |
      grep -v -E "^funcs.*" # noneeded
    return
  fi
  for arg in "$@"; do
    local _path=$trans_dir/$arg
    [[ ! -e $_path ]] && continue
    echo "$_path"
    break
  done
}

cat_do() {
  if is_dry; then
    log "===> below stdin will be pass to '$*'"
    cat -
    log "------------------------------------"
  else
    log ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    printf "> Executing: %s\n" "$*"
    log ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    # shellcheck disable=SC2294
    cat - | eval "$@" >/dev/null
  fi
}

cat_tee() {
  cat_do tee "$@"
}

sudo_tee() {
  cat_do sudo tee "$@"
}

tee_to_works_zsh() {
  local key="$*"
  local target="$HOME"/.works.zsh
  if [[ -n $key ]]; then
    if grep "$key" "$target" >&/dev/null; then
      return
    fi
  fi
  cat_do tee -a "$target"
}

setup_brew() {
  if ! has brew; then
    # shellcheck disable=SC2016
    exe '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
    # shellcheck disable=SC2016
    exe 'eval "$(/opt/homebrew/bin/brew shellenv)"'
  fi
  local target=$HOME/.zprofile
  if grep 'brew shellenv' "$target" >&/dev/null; then
    return
  fi
  cat_zprofile_brewenv |
    cat_tee -a "$target"
}

cat_zprofile_brewenv() {
  cat <<'EOF'
eval "$(/opt/homebrew/bin/brew shellenv)"
EOF
}

clone_dot() {
  local _user=$1
  local _dstd=$DOT_PATH
  local _own_dot=1
  local _setup_args=
  if [[ -n $_user && -e /home/$_user ]]; then
    _own_dot=0
    _dstd=/home/$_user/.dot
    _setup_args="${*:2}"
  else
    _setup_args="${*}"
  fi
  if [[ ! -e $_dstd ]]; then
    exe git clone https://github.com/tro3373/dotfiles.git "$_dstd"
  fi
  [[ -z $_setup_args ]] && return
  if [[ $_own_dot -eq 1 ]]; then
    exe "$HOME/.dot/bin/setup" "$_setup_args"
  else
    exe sudo -u "$_user" "/home/$_user/.dot/bin/setup" "$_setup_args"
  fi
}

default_apps() {
  local _apps=()
  _apps+=("${_core_apps[@]}")
  if [[ $minimal -ne 1 ]]; then
    _apps+=("${_core_apps_additional[@]}")
  fi
  if is_arch; then
    _apps+=("${_core_apps_additional_arch[@]}")
  fi
  echo "${_apps[@]}"
}

pre_setup() {
  dlog "=> No pre_setup defined."
}

post_setup() {
  dlog "=> No post_setup defined."
}

load_update_arg_apps() {
  dlog "=> No load_update_arg_apps defined."
  # shellcheck disable=SC2034
  args=()
}

not_supported() {
  log "=> Not supported"
}

no_settings() {
  log "=> Nothing to do in setting"
}

is_bootstrapped() { test -e $bootstrapped_path; }
bootstrapped() { date | cat_tee $bootstrapped_path; }

show_dummy_warn_if_needed() {
  if ! is_dry; then
    return
  fi
  ilog "===================================================="
  ilog " This is Dry-run mode. :D"
  ilog "===================================================="
}

init_export_path_if_possible() {
  local _script_dir
  _script_dir=$(
    cd "$(dirname "${BASH_SOURCE:-$0}")"
    pwd
  )
  local _git_root
  _git_root=$(cd "$_script_dir" && git rev-parse --show-toplevel)
  local _com_script_dir=$_git_root/bin
  if [[ -e $_com_script_dir ]]; then
    if ! echo ":$PATH:" | grep ":$_com_script_dir:" >&/dev/null; then
      ilog "=> init_funcs Exporting PATH env the path $_com_script_dir.."
      export PATH=$_com_script_dir:$PATH
    fi
  fi
}

init_detect_os() {
  if [[ -z $_os ]]; then
    if ! has os; then
      ilog "> Specify os type"
      exit 1
    fi
    _os=$(os)
  fi
  export DETECT_OS=$_os
}

init_funcs() {
  set -e
  local _os=$1
  local _user=${2:-$USER}
  [[ $_funcs_initialized -eq 1 ]] && return
  _funcs_initialized=1

  local _home=/home
  [[ $(uname) == "Darwin" ]] && _home=/Users
  export DOT_PATH=$_home/$_user/.dot
  export _backup_root="${DOT_PATH}/bkup/setup"
  # 関数ロード
  init_export_path_if_possible
  init_detect_os
  set_default_install_command
}
init_funcs "$@"

[[ ${0} != "${BASH_SOURCE[0]}" ]] && return 0
_test() {
  # default_apps
  # default_apps |mapfile args
  # args+=($(default_apps))
  read -r -a args < <(default_apps)
  for arg in "${args[@]}"; do
    echo "$arg"
  done
  echo "${args[@]}"
}
_test "$@"
