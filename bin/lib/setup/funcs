#!/bin/bash

export DOT_PATH=$HOME/.dot
readonly _timestamp=$(date +%Y%m%d_%H%M%S)
readonly _backup_root="${DOT_PATH}/bkup/setup"

readonly _core_apps=(
  git ssh tig curl bc tree tmux zsh vim ag rg ctags fzf
)
readonly _core_apps_additional=(
  neofetch anyenv go pt nvim nkf mmv gomi ghq shellcheck shfmt htop hub
  exa bat
)
readonly _core_apps_additional_arch=(
  yay
)
# Dynamic Variables
export debug=0
export dry_run=1
export tran=0
export force=0
export minimal=0
export view=0
args=()
_funcs_initialized=0

add_args() { args+=("$@"); }
is_debug() { [[ $debug -eq 1 ]]; }
is_dry() { [[ $dry_run -eq 1 ]]; }
log() { echo -e "$*" | ink cyan 1>&2; }
ilog() { echo -e "$*" | ink green 1>&2; }
dlog() { if is_debug; then log "$*"; fi; }
has() { command -v ${1} >&/dev/null; }
# TODO change func name
isexist() { find "$*" >&/dev/null; }

is_arch() { [[ $DETECT_OS == "arch" ]]; }
is_arm() { uname -m | grep arm >&/dev/null; }
is_msys() { [[ $DETECT_OS == "msys" ]]; }
is_cygwin() { [[ $DETECT_OS == "cygwin" ]]; }
is_mac() { [[ $DETECT_OS == "mac" ]]; }
is_ubuntu() { [[ $DETECT_OS == "ubuntu" ]]; }
is_redhat() { [[ $DETECT_OS == "redhat" ]]; }
is_win() { is_msys || is_cygwin; }
is_unix() { ! is_win; }

usage() {
  # shellcheck disable=SC2154
  if [[ -n $command_name ]]; then
    echo "$command_name command"
    return
  fi
  echo "This is funcs usage. overwrite usage method."
}

initialize_args() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      -e | --exec) dry_run=0 ;;
      -v | --view) view=1 ;;
      -f | --force) force=1 ;;
      -m | --minimal) minimal=1 ;;
      -d | --debug) debug=1 ;;
      *) add_args $1 ;;
    esac
    shift
  done
}

set_default_install_command() {
  export def_install_cmd="sudo apt-get install -y"
  if is_mac; then
    def_install_cmd="brew install"
  elif is_redhat; then
    def_install_cmd="sudo yum install -y"
  elif is_cygwin; then
    def_install_cmd="apt-cyg install"
  elif is_msys; then
    def_install_cmd="pacman -S --noconfirm"
  elif is_arch; then
    if has yay; then
      def_install_cmd="yay -S --noconfirm"
    elif has yaourt; then
      def_install_cmd="yaourt -S --noconfirm"
    else
      def_install_cmd="sudo pacman -S --noconfirm"
    fi
  fi
}

exe() {
  local cmd="$*"
  is_dry && log "   $cmd" && return
  dlog "===> Executing: $cmd"
  eval "$cmd" || (echo "===> Failed..... Executing $cmd" && exit 1)
}

make_dir_if_needed() {
  local tmp="$*"
  if [[ ! -e $tmp ]]; then
    exe "mkdir -p \"$tmp\""
  fi
}

# $1のファイルを$2へリンクを作成する
make_link() {
  local from=$1
  local to=$2
  exe "ln -s \"$from\" \"$to\""
}

# $* のリンクを 絶対パスで表示する（readlink -f の代用（For Mac））
# echo 結果がパスとして使用される為、log 実行時は正しく動作しない
readlink_path() {
  local target="$*"
  if [ "$target" = "" ]; then
    echo "Error!!! readlink_path Error!!!!!!!! argument is blank!!"
    return
  fi
  buf="$target"
  pre=""
  while [ "$buf" != "" ]; do
    pre="$buf"
    buf="$(readlink "$buf")"
  done
  echo "$pre"
}

# $* ディレクトリ配下の dot file をHOMEへリンクを作成する
make_link_dot2home() {
  local dir="$*"
  for file in $(
    find $dir -maxdepth 1 -mindepth 1 -name "\.*" -exec basename {} \; |
      grep -v "^.git$" |
      grep -v "^.gitignore$" |
      grep -v "^.gitkeep$" |
      grep -E '^\.[^.]+'
  ); do
    make_lnk_with_bkup "$dir/$file" "${HOME}/$file"
  done
}

# 同じリンクかどうか
is_same_link() {
  local src1=$1
  local src2=$2
  if [ "$src1" = "$src2" ]; then
    return 1
  fi
  if [ "$src1/" = "$src2" ]; then
    return 1
  fi
  if [ "$src1" = "$src2/" ]; then
    return 1
  fi
  return 0
}

# $1のファイルを$2へリンクを作成する
make_lnk_with_bkup() {
  local src=$1
  local lnk=$2
  local need_backup=0
  # dlog " make_lnk_with_bkup Start lnk=$lnk src=$src"
  #if [ -e "${lnk}" ]; then
  if isexist "${lnk}"; then
    # dlog "   @@@@@@ exist!"
    # ファイルタイプ(ファイル、ディレクトリ、リンク)をチェック
    #if [ -n "`find "${lnk}" -maxdepth 0 -type l`" ]; then
    if [ -L "${lnk}" ]; then
      # リンク
      # dlog "   @@@@@@ Link!"
      local fullpath_lnk="$(readlink_path "${lnk}")"
      local fullpath_src="$(readlink_path "${src}")"
      # dlog "    lnk:$lnk => fullpath_lnk=$fullpath_lnk"
      # dlog "    src:$src => fullpath_src=$fullpath_src"
      if ! is_same_link "$fullpath_lnk" "$fullpath_src"; then
        # 既に自分へのリンクの場合はなにもしない
        # dlog "  => Already linked. Skip it. path=${lnk}"
        return 0
      else
        # 他ファイルへのリンクなのでバックアップする
        # dlog "  => Not match link. backup it. old link is ${fullpath_lnk} => new link is ${fullpath_src}"
        need_backup=1
      fi
    elif [ -d "${lnk}" ]; then
      # ディレクトリはバックアップする
      # dlog "   @@@@@@ Dir!"
      dlog "  => Directory exist. Backup it. path=$lnk"
      need_backup=1
    elif [ -f "${lnk}" ]; then
      # 既存のファイルをバックアップする
      # dlog "   @@@@@@ File!"
      dlog "  => File exist. Backup it. path=$lnk"
      need_backup=1
    else
      # dlog "   @@@@@@ little bit!"
      # ないと思う
      dlog "  => Little bit strange exist. path=${lnk} ... Do nothing"
      return 0
    fi
  fi
  # バックアップが必要ならバックアップする
  if [ $need_backup -eq 1 ]; then
    # dlog "   @@@@@@ Backup!"
    backup_file "${lnk}"
  fi
  make_link "$src" "$lnk"
}

backup() {
  for f in "$@"; do
    sudo test ! -e $f && continue
    local dst=$f.org
    sudo test -e $dst && continue
    log "===> Backupping $f to $dst"
    exe sudo cp -rf $f $dst
  done
}

# $* のファイルを${_backup_root}に移動する
backup_file() {
  local _target="$*"
  # バックアップ先のディレクトリがない場合は作成する
  make_dir_if_needed "$_backup_root"

  local _name="$(basename "$_target")"
  # バックアップ先ディレクトリにmv
  exe "mv -fv \"$_target\" \"${_backup_root}/${_timestamp}_$_name\""
  del_if_exist "$_target"
  if [[ ! -e $_target ]]; then
    dlog "===> Backuped $_target"
  fi
}

# 存在する場合のみ削除
del_if_exist() {
  local rm_target="$*"
  if [ "$rm_target" = "/" ]; then
    log "invalid rm path $rm_target"
    return
  fi
  if isexist "$rm_target"; then
    exe "rm -rf \"$rm_target\""
  fi
}

has_local_package() {
  local p=$1
  if is_arch || is_msys; then
    pacman -Qi $p >&/dev/null && return 0
  elif is_ubuntu; then
    dpkg -l $p | grep -E '^ii' >&/dev/null && return 0
  elif is_redhat; then
    rpm -qi $p >&/dev/null && return 0
  else
    return 1
  fi
}
def_install() {
  local _pkgs=()
  for p in "$@"; do
    # shellcheck disable=SC2154
    if [[ $force -ne 1 ]]; then
      has $p && continue
      has_local_package $p && continue
    fi
    _pkgs+=("$p")
  done
  [[ ${#_pkgs[@]} -eq 0 ]] && return
  # shellcheck disable=SC2154
  exe $def_install_cmd "${_pkgs[*]}"
}
make_work_if_needed() {
  make_dir_if_needed "$workdir"
}
cd_work() {
  make_work_if_needed
  exe "cd \"$workdir\""
}

_github() {
  local dst="$1"
  local url="$2"
  local tag="${3:-}"
  local _sudo=""
  if ! is_win && [[ $dst == "/usr/local/src" ]]; then
    _sudo="sudo"
  fi
  local repo_name="${url##*/}"
  repo_name="${repo_name%%\.git}"
  local _path="$dst/$repo_name"
  if [[ -e $_path ]]; then
    exe cd $_path
    exe $_sudo git fetch
  else
    # ignore depth 1 option because tag info not readable
    # exe $_sudo git clone --depth 1 "$url" $_path
    exe $_sudo git clone "$url" $_path
    exe cd $_path
  fi
  if [[ -z $tag ]]; then
    if ! is_dry; then
      local tag=$(git tag --list | tail -1 2>/dev/null)
    fi
    if [[ -z $tag ]]; then
      return
    fi
  fi
  if ! is_dry; then
    local now_branch=$(git branch | grep -E "\*" | tr -d "*" | tr -d " ")
  fi
  if [[ -n $now_branch && $now_branch != "$tag" ]]; then
    exe $_sudo git checkout -b $tag $tag
  fi
}
github_user_local() {
  _github /usr/local/src "$@"
}
github() {
  _github "$workdir" "$@"
}
dl() {
  local _url="$1"
  local _dst="$2"
  if [[ -e $_dst ]] && [[ ! -d $_dst ]]; then
    dlog "Already exists file $_dst"
    return
  fi
  if [[ $# -eq 1 ]]; then
    ! is_dry && log "===> Downloading from $_url"
    if has curl; then
      exe "curl -fLO \"$_url\""
    else
      exe "wget \"$_url\""
    fi
  else
    ! is_dry && log "===> Downloading from $_url to $_dst"
    if has curl; then
      exe "curl -fL \"$_url\" -o \"$_dst\""
    else
      exe "wget \"$_url\" -O \"$_dst\""
    fi
  fi
}
dl_untar() {
  local url="$1"
  local _fname="${url##*/}"
  local to="${2:-$workdir/${_fname%%.*}}"
  local strip=${3:-1}
  [[ -z $_fname ]] && _fname=dl.tgz
  cd_work
  dl "$url" $_fname
  if [[ ! -e $to ]]; then
    exe mkdir -p "$to"
  fi
  if ! find $to >&/dev/null; then
    exe "tar xvfpz $_fname -C \"$to\" --strip-components $strip"
  fi
}
dl_unzip() {
  local url="$1"
  local to="${2:-$workdir}"
  cd_work
  dl "$url" dl.zip
  exe "unzip dl.zip -d \"$to\""
  log "==> Unzipped"
}

tool_env() {
  set -eu
  dry_run=0
  debug=1
  # shellcheck disable=SC2154
  workdir=$script_dir/tmp
}

rm_dotpath() {
  if [[ -e ~/.path ]]; then
    exe rm ~/.path
  fi
}

find_trans() {
  local trans_dir=$script_dir/lib/setup/trans
  if [[ $1 == -l ]]; then
    find $trans_dir/ -maxdepth 1 -mindepth 1 -type f -exec basename {} \; |
      grep -v -E "^funcs.*" # noneeded
    return
  fi
  for arg in "$@"; do
    local _path=$trans_dir/$arg
    [[ ! -e $_path ]] && continue
    echo "$_path"
    break
  done
}

cat_do() {
  if is_dry; then
    log "===> below stdin will be pass to '$*'"
    cat -
    log "------------------------------------"
  else
    log ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    printf "> Executing: $*\n"
    log ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    cat - | eval "$@" >/dev/null
  fi
}

cat_tee() {
  cat_do tee "$@"
}

sudo_tee() {
  cat_do sudo tee "$@"
}

cat_bash() {
  cat_do bash "$@" -
}

clone_dot() {
  if [[ -e $DOT_PATH ]]; then
    return
  fi
  curl -fSsL git.io/tr3s | cat_bash ""
}

default_apps() {
  local _apps=()
  _apps+=("${_core_apps[@]}")
  if [[ $minimal -ne 1 ]]; then
    _apps+=("${_core_apps_additional[@]}")
  fi
  if is_arch; then
    _apps+=("${_core_apps_additional_arch[@]}")
  fi
  echo "${_apps[@]}"
}

pre_setup() {
  dlog "=> No pre_setup defined."
}

post_setup() {
  dlog "=> No post_setup defined."
}

load_update_arg_apps() {
  dlog "=> No load_update_arg_apps defined."
  # shellcheck disable=SC2034
  args=()
}

not_supported() {
  log "=> Not supported"
}

has_check() {
  local _pkg="$*"
  if has "$_pkg"; then
    return
  fi
  log "No $_pkg command exist."
  exit 1
}

root_check() {
  if [[ $UID -eq 0 ]]; then
    return
  fi
  log "execute as root."
  exit 1
}

show_dummy_warn_if_needed() {
  if ! is_dry; then
    return
  fi
  ilog "===================================================="
  ilog " This is Dry-run mode. :D"
  ilog "===================================================="
}

init_funcs() {
  [[ $_funcs_initialized -eq 1 ]] && return
  # 関数ロード
  local _com_script_dir=$DOT_PATH/bin
  if ! echo ":$PATH:" | grep ":$_com_script_dir:" >&/dev/null; then
    export PATH=$_com_script_dir:$PATH
  fi
  export DETECT_OS=$(os)
  set_default_install_command
  _funcs_initialized=1
}
init_funcs

[[ ${0} != "${BASH_SOURCE[0]}" ]] && return 0
_test() {
  # default_apps
  # default_apps |mapfile args
  # args+=($(default_apps))
  read -a args < <(default_apps)
  for arg in "${args[@]}"; do
    echo "$arg"
  done
  echo "${args[@]}"
}
_test "$@"
