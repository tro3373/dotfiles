#!/usr/bin/env bash

manjaro_user=archuser && readonly manjaro_user

pre_setup() {
  log "=> pre setting up"

  _setup_user_group
  _install_apps
  _setup_visudo_editor
  _setup_home_dir_names
  _setup_custom_shortcut
  _setup_key_delay_repeat
  _setup_mount_media_setting
  _setup_suspend_hibernate
  _setup_improve_monitor_scale
  _setup_cronie
  _setup_sshd
}

load_update_arg_apps() {
  # cargo order bug?
  # shellcheck disable=SC2034
  read -r -a args < <(
    echo "$(default_apps) xclip snap fcitx5-mozc hackgen udev-gothic gnome-font-viewer code font"
  )
}

post_setup() {
  local show_webp_in_gnome="webp-pixbuf-loader"
  exe yay -S --noconfirm hardinfo google-chrome numix-gtk-theme numix-icon-theme numix-circle-icon-theme-git slack-desktop ristretto $show_webp_in_gnome vlc
  _setup_gnome_extension
  # TODO
  #   - Dark Theme
  log "===> In Settings"
  log "       Date and Time - Enable Set auto Date & Time"
  log "===> In Tweaks"
  log "       Change to Numix-Circle-Light Icon in Appearance - Icon"
  log "===> In GNOME Terminal"
  # log "       Change Paste to Shift-Insert from Ctlr+Shift+V"
  log "       Change Paste to Alt+v from Ctlr+Shift+V"
  log "===> In Fcitx Settings"
  log "       Change Key Bindings"
  log "         Enable Input Method: Right Alt"
  log "         Disable Input Method: Left Alt"
  log "       Disable Zenkaku space"
  log "===> In Mozc Settings"
  log "       Change Space input style to Halfwidth"
  log "       Import dictionary from drive backup"
  log "===> Enable in https://extensions.gnome.org/extension/307/dash-to-dock/"
  log "       Update setting: Set Dock to Top, etc.."
  log "===> Insatall Gnome Shell Extensions"
  log "       Dash to dock        : https://extensions.gnome.org/extension/307/dash-to-dock/"
  log "       Input method Popup  : https://extensions.gnome.org/extension/261/kimpanel/"
  log "===> reboot maybe needed."
}

_setup_gnome_extension() {
  # install org.gnome.shell.extensions & dash-to-dock
  exe git clone https://aur.archlinux.org/gnome-browser-connector.git ~/gnome-browser-connector
  exe pushd ~/gnome-browser-connector
  exe makepkg -si --noconfirm
  exe popd
}

_setup_user_group() {
  if ! id | grep wheel >&/dev/null; then
    exe sudo gpasswd -a "$(whoami)" wheel
  fi
  # shellcheck disable=SC2154
  # exe sudo mv /etc/sudoers.d/10-installer "$_backup_root"/
  local target=/etc/sudoers.d/20-$manjaro_user
  echo "$manjaro_user ALL=(ALL) NOPASSWD: ALL" |
    if is_dry; then
      cat -
    else
      cat - | sudo tee $target
    fi
}

_setup_cronie() {
  local target=cronie
  if sudo systamctl status $target | grep Active | grep active >&/dev/null; then
    return
  fi
  exe sudo systamctl enable $target
}

_setup_sshd() {
  local target=sshd
  if sudo systamctl status $target | grep Active | grep active >&/dev/null; then
    return
  fi
  exe sudo systamctl enable $target
}

_setup_visudo_editor() {
  local target=/etc/environment
  if sudo grep EDITOR=vim $target | grep vim >&/dev/null; then
    return
  fi
  if is_dry; then
    sudo sed -n -e 's,EDITOR=.*,EDITOR=vim,p' $target
  else
    exe sudo sed -i -e 's,EDITOR=.*,EDITOR=vim,g' $target
  fi
}

_setup_home_dir_names() {
  # if [ -e ~/Desktop ]; then
  #     return
  # fi
  # 日本語ディレクトリ名を英語化
  exe env LANGUAGE=C LC_MESSAGES=C xdg-user-dirs-gtk-update
}

_setup_key_delay_repeat() {
  # gsettings get org.gnome.desktop.peripherals.keyboard repeat-interval
  # gsettings get org.gnome.desktop.peripherals.keyboard delay
  gsettings_if_needed org.gnome.desktop.peripherals.keyboard repeat-interval 20
  gsettings_if_needed org.gnome.desktop.peripherals.keyboard delay 300
}

_setup_mount_media_setting() {
  # Disable automount external media
  gsettings_if_needed org.gnome.desktop.media-handling automount false
}

_setup_suspend_hibernate() {
  # Disable suspend if not log in
  exe sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target
  # Timeout for blanking the screen (seconds; 0 = never):
  gsettings_if_needed org.gnome.desktop.session idle-delay 0
  # Timeout for locking the screen after blanking (seconds; 0 = instant):
  gsettings_if_needed org.gnome.desktop.screensaver lock-delay 0
}

_setup_custom_shortcut() {
  # MEMO
  #   @see [command line - How to set custom keyboard shortcuts from terminal? - Ask Ubuntu](https://askubuntu.com/questions/597395/how-to-set-custom-keyboard-shortcuts-from-terminal)

  # gsettings list-recursively org.gnome.settings-daemon.plugins.media-keys |grep custom-keybindings

  # gsettings_add_custom_keybind 1 "Paste into Terminal" "<Primary><Shift>Insert" "xdotool key --clearmodifiers ctrl+shift+v"
  # gsettings_add_custom_keybind 1 "Paste into Terminal" "<Shift>Insert" "xsel -bo" # Not work
  # gsettings_add_custom_keybind 2 "Open Terminal" "<Primary><Alt>t" "gnome-terminal"
  gsettings_add_custom_keybind 2 "Open Terminal" "<Primary><Alt>t" "wezterm"
  gsettings_add_custom_keybind 3 "Open Downloads" "<Super>e" "nautilus Downloads"
  # gsettings_add_custom_keybind 4 "Paste option v" "<Alt>v" "xsel -bo" # Not work?

  # List current keybindings
  # gsettings list-recursively org.gnome.desktop.wm.keybindings
  # [MYN - 2021/01/12 14:52 / gnome-shell で Alt-tab で group ベースの window switch (swith-application)をしない](https://myn.meganecco.org/1610430720.html)
  gsettings_if_needed org.gnome.desktop.wm.keybindings maximize "\"['<Super>Up']\""             # Window最大化
  gsettings_if_needed org.gnome.desktop.wm.keybindings switch-applications "\"['<Super>Tab']\"" # アプリ切り替え
  gsettings_if_needed org.gnome.desktop.wm.keybindings switch-windows "\"['<Alt>Tab']\""        # ウィンドウ切り替え
  # gsettings_if_needed org.gnome.desktop.wm.keybindings paste "['<Alt>v']" # Not work?

  # Change screenshot keybind
  gsettings_if_needed org.gnome.shell.keybindings show-screenshot-ui "\"['Print', '<Super><Shift>S']\""
}

gsettings_add_custom_keybind() {
  id=$1
  name=$2
  binding=$3
  cmd=$4
  # gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']"
  # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'suspend'
  # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<Super>s'
  # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'systemctl suspend'
  scheme_1=org.gnome.settings-daemon.plugins.media-keys
  key="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$id/"
  name_ck="custom-keybindings"
  keys="$(get_keys)"
  gsettings_if_needed "$scheme_1" "$name_ck" "\"[$keys]\""
  scheme_2="$scheme_1.custom-keybinding:$key"
  gsettings_if_needed "$scheme_2" name "\"$name\""
  gsettings_if_needed "$scheme_2" binding "\"$binding\""
  gsettings_if_needed "$scheme_2" command "\"$cmd\""
}

get_keys() {
  {
    echo "$key"
    gsettings get "$scheme_1" "$name_ck" | tr "'" '\n' | grep org
  } | sort -u | sed -e "s,^,',g" -e "s,$,',g" | tr '\n' ',' | sed -e 's/,$//g'
}

_setup_improve_monitor_scale() {
  gsettings_if_needed org.gnome.mutter experimental-features "\"['scale-monitor-framebuffer']\""
}

_install_apps() {
  local apps=()
  while read -r line; do
    [[ -z $line ]] && continue
    [[ $line =~ ^#.* ]] && continue
    pacman -Qs "$line" >&/dev/null && continue
    apps+=("$line")
  done < <(
    cat <<EOF
vim
base-devel
gnu-netcat
xsel
xdotool
net-tools
dnsutils
gparted
smartmontools
meld
gnome-tweaks
# for nautilus smb:// access
gvfs-smb
python-pip
EOF
  )

  if [[ ${#apps[@]} -eq 0 ]]; then
    return
  fi

  if ! grep Japan /etc/pacman.d/mirrorlist >&/dev/null; then
    exe 'sudo pacman-mirrors -c Japan && sudo pacman -Syu'
    # Server = http://ftp.tsukuba.wide.ad.jp/Linux/manjaro/stable/$repo/$arch
    # Server = http://ftp.riken.jp/Linux/manjaro/stable/$repo/$arch
  fi
  #exe sudo pacman -Sy --noconfirm gnupg archlinux-keyring
  #exe sudo pacman-key --refresh-keys --keyserver keyserver.ubuntu.com
  exe sudo pacman-key --refresh-keys
  # Disable for No such app error
  #   exe sudo pacman -Rsu --noconfirm manjaro-gdm-theme firefox-gnome-theme-maia adwaita-maia
  # Fix error
  #  exe sudo pacman -Syu --noconfirm glibc-locales --overwrite /usr/lib/locale/\*/\*
  exe sudo pacman -Syu --noconfirm glibc-locales
  # exe sudo pacman -Syyu --noconfirm

  # shellcheck disable=SC2154
  exe "$def_install_cmd" "${apps[@]}"

}
