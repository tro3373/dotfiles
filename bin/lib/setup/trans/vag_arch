#!/usr/bin/env bash

readonly _script_dir=$(
  cd "$(dirname ${BASH_SOURCE:-$0})"
  pwd
)
source $_script_dir/../funcs_arch

pre_setup() {
  log "=> pre setting up"
  # setup_keyboard

  setup_timezone
  setup_locale

  improve_pacman_millerlist
  # if [[ $1 == with_manjaro ]]; then
  #   ## see https://dev.to/mattdark/signature-is-unknown-trust-arch-linux-on-vbox-3452
  #   exe sudo rm -r /etc/pacman.d/gnupg
  #   exe sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring
  #   exe sudo pacman-key --init
  #   exe sudo pacman-key --populate archlinux manjaro
  #   exe sudo pacman-key --refresh-keys
  #   exe sudo pacman -Sc # delete all packages that not installed
  #   return
  # fi
  ## error occur. see https://bbs.archlinux.org/viewtopic.php?id=253809
  ## execute below in windows..
  # bcdedit /set hypervisorlaunchtype off

  # refresh_pacman_keys
  # exe sudo rm -r /etc/pacman.d/gnupg
  setup_pac_key
  # > Error in vagrant arch.....
  # exe sudo pacman-key --refresh-keys
  # ==> Error(see https://bbs.archlinux.org/viewtopic.php?id=257441)
  #     gpg: refreshing 120 keys from hkps://hkps.pool.sks-keyservers.net
  #     gpg: keyserver refresh failed: General error
  #     ==> ERROR: A specified local key could not be updated from a keyserver.
  # permanently append
  # shellcheck disable=SC2119
  setup_gnupg refresh
  setup_gnupg_keyserver_settings /home/vagrant
  improve_pacman_conf
  improve_pacman_aria2

  # パッケージ更新
  # shellcheck disable=SC2119
  update_and_add_pacman_packages
  setup_additional_pacakges
}

load_update_arg_apps() {
  # shellcheck disable=SC2034
  read -a args < <(
    echo "$(default_apps) systemd-timesyncd"
  )
}

post_setup() {
  setup_login_shell vagrant
  # setup samba
  enable_vag_netctl_eth1
  disable_vag_netctl_eth0
  setup_vag_samba
  log "===> reboot maybe needed."

  # =================GUI環境===================
  # sudo pacman -S --noconfirm xorg-xinit lightdm-gtk-greeter
  # sudo pacman -S --noconfirm xorg-xinit
  # sudo pacman -S --noconfirm lightdm-gtk-greeter
  # yes 'all' | sudo pacman -S --noconfirm xfce4 lightdm
  # sudo pacman -S --noconfirm xfce4 lightdm
  # sudo pacman -S --noconfirm xfce4
  # sudo systemctl enable lightdm.service
  # ## /etc/systemd/system/default.targetのリンクをmulti-user.targetからgraphical.targetに変える
  # sudo systemctl set-default graphical.target
  ## =================フォントとインプットメソッドのインストール===================
  # yaourt -S --noconfirm otf-takao
  # yes 'all' | sudo pacman -S --noconfirm fcitx-im fcitx-configtool fcitx-mozc
  # sudo pacman -S --noconfirm fcitx-im fcitx-configtool fcitx-mozc
  # sudo cat << 'EOF' > ${HOME}/.xprofile
  # export GTK_IM_MODULE=fcitx
  # export QT_IM_MODULE=fcitx
  # export XMODIFIERS=”@im=fcitx”
  # EOF
  # ## =================自動ログイン===================
  # sudo cat /etc/lightdm/lightdm.conf |
  #    sudo sed -e 's/#autologin-user=/autologin-user=vagrant/' |
  #        sudo tee /etc/lightdm/lightdm.conf
  # sudo groupadd -r autologin
  # sudo gpasswd -a vagrant autologin
  # ↑一回目のログインはユーザー名とパスワード(どちらもvagrnat)打たないといけない
  # =====================dockerセットアップ==========================
  #sudo pacman -S --noconfirm docker  # dockerインストール
  #sudo systemctl enable docker  # ログイン時にデーモン実行
  #sudo groupadd docker  # sudoなしで使えるようにする設定
  #sudo gpasswd -a vagrant docker  # sudoなしで使えるようにする設定
  #sudo systemctl restart docker
  # =================その他好きなもの===================
  # yaourt -S --noconfirm man-pages-ja-git  # 日本語man
  # sudo pacman -S --noconfirm fzf  # Simplistic interactive filtering tool
  # sudo pacman -S --noconfirm thefuck  # Corrects your previous console command
  # sudo pacman -S --noconfirm atool  # Managing file archives of various types
  # yaourt -S --noconfirm gitflow-avh-git  # git-flow tools
  # sudo pacman -S --noconfirm python-pygments pygmentize  # Python syntax highlighter
}

setup_vag_samba() {
  if ! has samba; then
    def_install samba
  fi
  if sudo test -e /etc/samba/smb.conf; then
    return
  fi
  if ! sudo test -e /etc/samba/smb.conf.org; then
    exe 'sudo wget -O /etc/samba/smb.conf.org "https://git.samba.org/samba.git/?p=samba.git;a=blob_plain;f=examples/smb.conf.default;hb=HEAD"'
  fi
  cat <<EOF | sudo_tee -a /etc/samba/smb.conf
[global]
    # TBD ファイルを使用
    passdb backend = tdbsam
    # アーカイブ属性と実行属性を相互変換しない
    map archive = no
    unix charset = UTF-8
    dos charset = CP932

    #workgroup = WORKGROUP
    #local master = yes
    #unix password sync = yes

    interfaces = 127.0.0.0/8 eth1
    bind interfaces only = yes
    hosts allow = 127. 192.168.33.0/24
    hosts deny = all

    security = user
    dns proxy = no
    map to guest = Bad User
    create mode = 0664
    guest account = vagrant
    directory mode = 0775
[share]
   path = /home/vagrant
   writeable = true
   force user = vagrant
   force group = vagrant
   public = true
   # public の alias
   guest ok = yes
   guest only = yes

EOF
  #sudo smbpasswd vagrant
  exe sudo chmod 755 /home/vagrant
  exe sudo systemctl enable smb nmb
  # exe sudo systemctl start smb nmb
}

# disable_vag_netctl_eth0() {
#   local delay_shell=/tmp/todo.sh
#   echo 'sleep 2' >>$delay_shell
#   if sudo test -e /etc/netctl/eth0; then
#     # exe sudo rm /etc/netctl/eth0
#     echo 'sudo rm /etc/netctl/eth0' >>$delay_shell
#   fi
#   if test -L /etc/systemd/system/multi-user.target.wants/netctl@eth0.service; then
#     echo 'sudo systemctl disable netctl@eth0.service' >>$delay_shell
#   fi
#   exe "nohup sh $delay_shell &"
# }
disable_vag_netctl_eth0() {
  if sudo test -e /etc/netctl/eth0; then
    exe sudo rm /etc/netctl/eth0
  fi
  if test -L /etc/systemd/system/multi-user.target.wants/netctl@eth0.service; then
    exe sudo systemctl disable netctl@eth0.service
  fi
}

enable_vag_netctl_eth1() {
  gen_vag_netctl_eth1
  gen_vag_eth1_rules
}

gen_vag_netctl_eth1() {
  if sudo test -e /etc/netctl/eth1; then
    return
  fi
  cat <<EOF | sudo_tee /etc/netctl/eth1
Connection=ethernet
Description='A basic static ethernet connection'
Interface=eth1
IP=static
Address=('192.168.33.10/24')
EOF
}

gen_vag_eth1_rules() {
  local net_rule=/etc/udev/rules.d/66-persistent-net.rules
  if sudo grep eth1 $net_rule >/dev/null; then
    return
  fi
  backup $net_rule
  local mac=$(cat /sys/class/net/enp0s8/address)
  cat <<EOF | sudo_tee -a $net_rule
# from enp0s8 to eth1
SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="$mac", NAME="eth1"
EOF
}
