#!/data/data/com.termux/files/usr/bin/bash

ink() {
  local stdin=
  if [[ -p /dev/stdin ]]; then
    stdin="$(cat <&0)"
  fi
  if [[ $# -eq 0 && -z $stdin ]]; then
    return
  fi

  local open="\033["
  local close="${open}0m"
  export black="0;30m"
  export red="1;31m"
  export green="1;32m"
  export yellow="1;33m"
  export blue="1;34m"
  export purple="1;35m"
  export cyan="1;36m"
  export gray="0;37m"
  export white="$close"

  local text="$stdin$*"
  local color="$close"

  case $1 in
    black | red | green | yellow | blue | purple | cyan | gray | white)
      eval color="\$$1"
      text="$stdin${*:2}"
      ;;
  esac

  # shellcheck disable=SC2059
  printf "${open}${color}${text}${close}\n" 1>&2
}
log() { echo "$(date +"%Y-%m-%d %H:%M:%S") $*" | ink red; }
log_skip() { log "===> Already setupped."; }
has() { command -v "${1}" >&/dev/null; }

setup_bin() {
  [[ -e ~/bin ]] && return
  mkdir -p ~/bin
}

setup_storage() {
  log "==> Setting up storage via termux-setup-storage..."
  local target=~/storage/downloads
  [[ -e $target ]] && log_skip && return
  termux-setup-storage
}

setup_bashrc() {
  local target=~/.bashrc
  log "==> Setting up $target..."
  [[ -e $target ]] && log_skip && return
  cat <<'EOF' >>$target
# [[ $SHLVL = 1 ]] && termux-chroot
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -l'
export PATH=~/bin:$PATH
EOF
}

setup_pkgs() {
  log "==> Update & Upgradeing pkgs...(termux-change-repo needed...)"
  apt update -y
  apt upgrade -y
  pkg install -y proot
}

setup_ssh_auth_keys() {
  local target=~/.ssh
  log "==> Setting up $target..."
  [[ -e $target ]] && log_skip && return
  mkdir -p $target
  touch $target/authorized_keys
  chmod 700 $target
  chmod 600 $target/authorized_keys
}

setup_sshd() {
  log "==> Setting up openssh..."
  has sshd && log_skip && return
  apt install -y openssh
  log "==> sshd installed."
  log "===> Excute 'sshd' command to start. port is 8022. user is any."
  log "===> Excute 'pkill sshd' command to stop"
}

setup_ssh() {
  log "==> Setting up ssh..."
  setup_ssh_auth_keys
  setup_sshd
}

setup_python() {
  log "==> Setup python..."
  has python && log_skip && return
  pkg install python -y
}

setup_ffmpeg() {
  log "==> Setup ffmpeg..."
  has ffmpeg && log_skip && return
  apt install ffmpeg -y
}

setup_youtubedl() {
  log "==> Setup youtube-dl..."
  has youtube-dl && log_skip && return
  pip install youtube-dl
  # [[ ! -e ~/.config/youtube-dl ]] && mkdir -p ~/.config/youtube-dl
  # echo '--no-mtime -o ~/storage/downloads/%(title)s.%(ext)s -f "bestvideo[height<=1280][ext=mp4]+bestaudio[ext=m4a]"' >>~/.config/youtube-dl/config
}

setup_ytdlp() {
  log "==> Setup yt-dlp..."
  has yt-dlp && log_skip && return
  pip install yt-dlp
}

setup_ydl() {
  log "==> Setup ydl..."
  has ydl && log_skip && return
  # TODO
}

setup_start_ydl() {
  local target=start_ydl
  log "==> Setup $target..."
  has $target && log_skip && return
  echo 'termux-chroot /home/bin/ydl' >>~/bin/$target
  chmod 755 ~/bin/$target
}

# setup_upd() {
#   local target=upd
#   log "==> Setup $target..."
#   has $target && log_skip && return
#   # echo 'pip install -U youtube-dl' >>~/bin/$target
#   echo 'pip install -U yt-dlp' >>~/bin/$target
#   chmod 755 ~/bin/$target
# }

cat_url_opener_old() {
  # -f, --format FORMAT :  Video format code, see the "FORMAT SELECTION" for all the info
  #       bestvideo[height<=1280][ext=mp4]+bestaudio[ext=m4a]
  #       bestvideo[ext=mp4][height<=720]+bestaudio
  # --no-mtime          : Do not use the Last-modified header to set the file modification time
  # --restrict-filenames: Restrict filenames to only ASCII characters, and avoid "&" and spaces in filenames
  # -x, --extract-audio
  #       Convert video files to audio-only files (requires ffmpeg/avconv and ffprobe/avprobe)
  # --audio-format FORMAT
  #       Specify audio format: "best", "aac", "flac", "mp3", "m4a", "opus", "vorbis", or "wav"; "best" by default; No effect without -x
  cat <<'EOF'

  # --no-mtime \
  # --restrict-filenames \
  # -f 'bestvideo[height<=1280][ext=mp4]+bestaudio[ext=m4a]' \
  # youtube-dl \
yt-dlp \
  -f 'bestvideo[ext=mp4][height<=720]+bestaudio' \
  -x --audio-format mp3 \
  -o '~/storage/downloads/%(id)s-%(title)s.%(ext)s' \
  $1
EOF
}

cat_url_opener() {
  cat <<'EOF'
#!/data/data/com.termux/files/usr/bin/bash

has() { command -v "${1}" >&/dev/null; }
main() {
  if ! has termux-chroot; then
    echo "No termux-chroot exist" 1>&2
    return
  fi
  if ! termux-chroot "test -e /etc/resolv.conf && grep nameserver /etc/resolv.conf" >&/dev/null; then
    termux-chroot "echo 'nameserver 8.8.8.8' >>/etc/resolv.conf /etc/resolv.conf"
  fi
  if ! pgrep ydl >&/dev/null; then
    nohup termux-chroot /home/bin/ydl &
  fi
  am start -a android.intent.action.VIEW -d "http://localhost:3000?url=$@"
}
main "$@"
EOF
}

setup_url_opener() {
  local target=termux-url-opener
  log "==> Setup $target..."
  has $target && log_skip && return
  setup_python
  setup_ffmpeg
  # setup_youtubedl
  setup_ytdlp
  setup_ydl
  setup_start_ydl
  # setup_upd
  cat_url_opener >>~/bin/$target
  chmod 755 ~/bin/$target
}

setup_nvim() {
  log "==> Setup nvim..."
  has nvim && log_skip && return
  apt install -y neovim
}

setup_file_editor() {
  local target=termux-file-editor
  log "==> Setup $target..."
  has $target && log_skip && return
  setup_nvim
  local _path
  _path=$(which nvim)
  ln -s "$_path" ~/bin/$target
}

main() {
  set -e
  setup_bin
  setup_storage
  setup_bashrc
  setup_pkgs
  setup_ssh
  setup_url_opener
  setup_file_editor
  log "Done!"
}
main "$@"
