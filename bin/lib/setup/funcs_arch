#!/usr/bin/env bash

# keyboard_layout=jp106
readonly keyboard_layout=us
readonly _additional_arch=(
  pacman-contrib        # pacman cache clean
  reflector             # update mirrorlist tool
  net-tools             # deplicated. ifconfig, route, arp, netstat...
  inetutils             # ifconfig, hostname, ping...
  xsel xorg-server-xvfb # for clipboard
  libxfont2             # x11 font rasterisation library
)

setup_keyboard() {
  log "==> setupping keyboard .."
  if localectl | grep "Keymap" | grep $keyboard_layout >/dev/null; then
    return
  fi
  exe sudo localectl set-keymap $keyboard_layout
}

setup_timezone() {
  log "==> setupping timezone .."
  local val="Asia/Tokyo"
  if timedatectl | grep "Time zone" | grep "$val" >/dev/null; then
    return
  fi
  exe sudo timedatectl set-timezone $val # タイムゾーン設定
}

cat_locale_conf() {
  # LC_NUMERIC=en_US.UTF8
  # LC_MONETARY=en_US.UTF8
  # LC_PAPER=en_US.UTF8
  # LC_MEASUREMENT=en_US.UTF8
  cat <<'EOF'
LANG=en_US.UTF8
LANGUAGE=en_US.UTF8
LC_TIME=en_DK.UTF8
LC_COLLATE=C
EOF
}

cat_locale_gen() {
  cat <<'EOF'
ja_JP.UTF-8 UTF-8
en_US.UTF-8 UTF-8
en_DK.UTF-8 UTF-8
EOF
}

setup_locale() {
  log "==> setupping locale .."
  if sudo grep "en_US.UTF-8 UTF-8" /etc/locale.gen >&/dev/null && sudo grep "LANG=en_US.UTF8" /etc/locale.conf >&/dev/null; then
    return
  fi
  backup /etc/locale.gen
  backup /etc/locale.conf

  cat_locale_conf | sudo_tee /etc/locale.conf
  cat_locale_gen | sudo_tee /etc/locale.gen

  exe sudo locale-gen
}

setup_additional_pacakges() {
  def_install "${_additional_arch[@]}"
}

cat_hosts() {
  cat <<EOF
127.0.0.1 localhost
::1       localhost
127.0.1.1 $_hostname.localdomain $_hostname
EOF
}

setup_hostname() {
  local _hostname="$*"
  local target=/etc/hostname
  if grep $_hostname $target >&/dev/null; then
    return
  fi
  local _old_host=$(cat </etc/hostname | head -1)
  backup $target
  exe hostnamectl set-hostname $_hostname
  exe hostnamectl
  target=/etc/hosts
  backup $target
  if getent hosts | grep $_old_host >&/dev/null; then
    exe sed -i -e "s,$_old_host,$_hostname,g" /etc/hosts
  else
    cat_hosts | sudo_tee -a $target
  fi
  exe getent hosts
}

cat_pacman_mirrorlist_x86_64() {
  cat <<'EOF'
###########################
## Japan
Server = https://mirrors.cat.net/archlinux/$repo/os/$arch
Server = http://mirrors.cat.net/archlinux/$repo/os/$arch
Server = http://ftp.tsukuba.wide.ad.jp/Linux/archlinux/$repo/os/$arch
Server = https://ftp.jaist.ac.jp/pub/Linux/ArchLinux/$repo/os/$arch
Server = http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/$repo/os/$arch
###########################
EOF
}

cat_pacman_mirrorlist_arm() {
  cat <<'EOF'
###########################
## Taiwan
## New Taipei City
Server = http://tw.mirror.archlinuxarm.org/$arch/$repo
###########################
# Default mirror
## Geo-IP based mirror selection and load balancing
Server = http://mirror.archlinuxarm.org/$arch/$repo
EOF
}

cat_pacman_mirrorlist() {
  if is_arm; then
    cat_pacman_mirrorlist_arm
  else
    cat_pacman_mirrorlist_x86_64
  fi
}

improve_pacman_millerlist() {
  local target=/etc/pacman.d/mirrorlist
  local _grep_key="ftp.tsukuba.wide.ad.jp"
  if is_arm; then
    _grep_key="tw.mirror.archlinuxarm.org"
  fi
  if sudo grep -E "^Server.*$_grep_key" $target >&/dev/null; then
    return
  fi
  backup $target
  log "==> setupping pacman millerlist .."
  cat_pacman_mirrorlist | sudo_tee $target
}

setup_pac_key() {
  exe pacman-key --init
  local populate_key=archlinux
  is_arm && populate_key=archlinuxarm
  exe pacman-key --populate $populate_key
}

setup_gnupg() {
  local _home_dirs=("$HOME" "${@}")
  exe pacman -Sy gnupg --noconfirm
  exe pacman -Sy archlinux-keyring --noconfirm
  local specify_keyserver=pool.sks-keyservers.net
  for d in "${_home_dirs[@]}"; do
    local local_gpg_settings=$d/.gnupg/gpg.conf
    if [[ -e $local_gpg_settings ]]; then
      continue
    fi
    exe mkdir -p "$(dirname $local_gpg_settings)"
    exe cp /etc/pacman.d/gnupg/gpg.conf $local_gpg_settings
    echo "keyserver $specify_keyserver" |
      cat_tee -a $local_gpg_settings
  done
  exe pacman-key --refresh-keys --keyserver $specify_keyserver
}

# refresh_pacman_keys() {
#   exe sudo rm -r /etc/pacman.d/gnupg
#   setup_pac_key
#   setup_gnupg
# }

update_and_add_pacman_packages() {
  exe pacman -Syyu --noconfirm
  if [[ $# -ne 0 ]]; then
    exe pacman -S "$@" --noconfirm
  fi
  exe pacman -Sc --noconfirm # delete all packages that not installed
}

improve_pacman_conf() {
  backup /etc/pacman.conf
  if ! grep -E '^Color' /etc/pacman.conf >&/dev/null; then
    log "==> improving pacman conf Color.."
    exe 'sudo sed -i -e "s,^#Color,Color,g" /etc/pacman.conf'
  fi
  if ! grep -E '^ILoveCandy' /etc/pacman.conf >&/dev/null; then
    log "==> improving pacman conf use ILoveCandy.."
    exe 'sudo sed -i -e "s,^Color,Color\nILoveCandy,g" /etc/pacman.conf'
  fi
}

improve_pacman_aria2() {
  backup /etc/pacman.conf
  if sudo grep aria2 /etc/pacman.conf >&/dev/null; then
    return
  fi
  log "==> improving pacman conf to use aria2 .."
  # fast pacman install
  exe sudo pacman -S aria2 --noconfirm
  local settings_aria2c='XferCommand = /usr/bin/aria2c --allow-overwrite=true --continue=true --file-allocation=none --log-level=error --max-tries=2 --max-connection-per-server=2 --max-file-not-found=5 --min-split-size=5M --no-conf --remote-time=true --summary-interval=60 --timeout=5 --dir=/ --out %o %u'
  exe 'sudo sed -i -e "s,^\(HoldPkg.*\),\1\n'$settings_aria2c',g" /etc/pacman.conf'
}

create_user() {
  local _user=$1
  if [[ ! -e /home/$_user ]]; then
    log "=> Adding user $_user .."
    exe useradd -m -G wheel $_user
  fi
  local _pass="$2"
  [[ -z $_pass ]] && return
  change_passwd "$_user" "$_pass"
}

change_passwd() {
  local _user=$1
  local _pass="$2"
  [[ -z $_pass ]] && elog "==> invalid args. cannot set password for user $_user" && return
  log "=> Changing user password for $_user .."
  echo -e "$_pass\n$_pass" |
    cat_do passwd $_user
}

del_user() {
  local _username=$1
  exe userdel -r $_username
}

setup_user_authorized_keys() {
  local _user=$1
  local _pubkey=$2
  if [[ -f $_pubkey ]]; then
    _pubkey=$(cat <$_pubkey)
  fi
  local _dstd=/home/$_user/.ssh
  local _dstf=$_dstd/authorized_keys
  if [[ -e $_dstf ]]; then
    return
  fi
  if [[ ! -e $_dstd ]]; then
    exe sudo -u $_user mkdir -p $_dstd
  fi
  exe chmod 700 $_dstd
  exe "echo $_pubkey | sudo -u $_user tee $_dstf"
  exe chmod 600 $_dstf
}

setup_sudoers() {
  local _user=$1
  if grep $_user /etc/sudoers >&/dev/null; then
    return
  fi
  log "=> Setupping visudo.."
  backup /etc/sudoers
  echo "$_user ALL=(ALL) NOPASSWD: ALL" |
    cat_do "EDITOR='tee -a' visudo"
}

setup_login_shell() {
  local _user=$1
  log "==> setupping login shell for $_user .."
  ! has zsh && return
  if cat </etc/passwd | grep $_user | grep zsh >&/dev/null; then
    return
  fi
  exe sudo chsh $_user -s /usr/bin/zsh
}

cat_netctl_static() {
  cat <<EOF
Description='A basic static ethernet connection'
Interface=eth0
Connection=ethernet
IP=static
Address=('$_ip/$_mask')
#Routes=('192.168.0.0/24 via 192.168.1.2')
Gateway='$_gw'
DNS=($_dnses)

## For IPv6 autoconfiguration
#IP6=stateless

## For IPv6 static address configuration
#IP6=static
#Address6=('1234:5678:9abc:def::1/64' '1234:3456::123/96')
#Routes6=('abcd::1234')
#Gateway6='1234:0:123::abcd'
EOF
}

gen_netctl_static() {
  local _ip=$1
  local _mask=${2:-24}
  local _if=${3:-eth0}
  local _gw=$4
  local _dnses=$5
  local target=/etc/netctl/$_if
  if [[ -e $target ]]; then
    return
  fi
  local ip_prefix=${_ip%\.*}
  if [[ -z $_gw ]]; then
    _gw=${ip_prefix}.1
  fi
  if [[ -z $_dnses ]]; then
    _dnses="'$_gw'"
  fi
  backup $target
  cat_netctl_static | cat_tee $target
}

cat_network_eth0() {
  cat <<EOF
[Match]
Name=eth0

[Network]
Address=$_ip/$_mask
Gateway=$_gw
DNS=$_dnses
EOF
}

gen_network_eth0() {
  local _ip=$1
  local _mask=${2:-24}
  local _if=${3:-eth0}
  local _gw=$4
  local _dnses=$5
  # local target=/etc/netctl/$_if
  local target=/etc/systemd/network/$_if.network
  if [[ -e $target ]] && grep $_ip $target >&/dev/null; then
    return
  fi
  local ip_prefix=${_ip%\.*}
  if [[ -z $_gw ]]; then
    _gw=${ip_prefix}.1
  fi
  if [[ -z $_dnses ]]; then
    _dnses="$_gw"
  fi
  backup $target
  cat_network_eth0 | cat_tee $target
}

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
_test() {
  :
}
_test "$@"
