#!/usr/bin/env bash

# @see: [Arch Linuxの最小限インストール - Qiita](https://qiita.com/j8takagi/items/235e4ae484e8c587ca92)
# @see: [Arch Linux をおしゃれに最速インストール - おしゃれな気分でプログラミング](http://neko-mac.blogspot.com/2021/05/arch-linux.html)
# @see: [Arch Linux インストールの流れ](https://zenn.dev/toga/articles/385c64aab18a0a54df68)

readonly conf=$0.conf

waiting_for() {
  echo "#########################################################"
  echo "# Starting $*"
  echo "#   Press enter to continue"
  echo "#########################################################"
  read _
}

setup_network_for_live() {
  iwctl
  : [iwd]# device list
  : [iwd]# station wlan0 scan
  : [iwd]# station wlan0 get-networks
  # shellcheck disable=SC2154
  : [iwd]# station wlan0 connect $ssid
  # Check network
  ping 8.8.8.8
  curl ifconfig.io
}

setup_timedate_for_live() {
  timedatectl set-ntp true
  date
  # Thu Jan 27 09:27:47 PM UTC 2022
}

setup_partitions() {
  # Check boot mode. If show list, then the device is UEFI.
  efivar -l >/dev/null || (echo "No uefi device?" 1>&2 && exit 1)
  echo "=> efivar check ok"
  # 4a67b082-0a4c-41cf-b6c7-440b29bb8c4f-LoaderTimeExecUSec
  # 4a67b082-0a4c-41cf-b6c7-440b29bb8c4f-LoaderEntrySelected
  # ...

  # Check the target disk to install
  lsblk
  # NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
  # loop0         7:0    0 715.4M  1 loop /run/archiso/airootfs
  # sda           8:0    0 223.6G  0 disk
  # ├─ada1        8:1    0    31K  0 part
  # ├─ada2        8:2    0 120.8G  0 part
  # ├─ada3        8:3    0   576M  0 part
  # └─ada4        8:4    0   100G  0 part
  # sdb           8:16   1   3.8G  0 disk
  # ├─sdb1        8:17   1   790M  0 part /run/archiso/bootmnt
  # └─sdb2        8:18   1    74M  0 part
  # ...

  # shellcheck disable=SC2154
  waiting_for Edit partition via gdisk ${dst_dev}
  # Create partitions
  gdisk ${dst_dev}
  : o     # Remove all partitions
  : n     # Add new partition
  : Enter # partition number(default 1)
  : Enter # First sector(default 2048)
  : 512M  # Last sector
  : ef00  # Hex code or GUID(ef00: EFI system partition)
  : n     # Add new partition
  : Enter # partition number(default 2)
  : Enter # First sector(default 2048)
  : Enter # Last sector(default remain all)
  : Enter # Hex code or GUID(default 8300 is Liux filesystem)
  : w     # Write table to disk and exit
  # Do you want to proceed? (Y/N): y
  # OK; writing new GUID partition table (GPT) to ${dst_dev}.
  # The operation has completed successfully.

  waiting_for mkfs.fat -F32 ${dst_dev}1
  mkfs.fat -F32 ${dst_dev}1
  # mkfs.fat 4.2 (2021-01-31)
  waiting_for mkfs.ext4 ${dst_dev}2
  mkfs.ext4 ${dst_dev}2
  # mke2fs 1.46.4 (18-Aug-2021)
  # ...
}

setup_pacstrap() {
  waiting_for Mount partitions /mnt, /mnt/boot

  mount ${dst_dev}2 /mnt
  mkdir /mnt/boot
  mount ${dst_dev}1 /mnt/boot
  mount | grep /mnt
  # ${dst_dev}2 on /mnt type ext4 (rw,relatime)
  # ${dst_dev}1 on /mnt/boot type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro)

  cp /etc/pacman.d/mirrorlist{,.bk}
  cat <<'EOF' >/etc/pacman.d/mirrorlist
Server = https://ftp.jaist.ac.jp/pub/Linux/ArchLinux/$repo/os/$arch
Server = https://ftp.tsukuba.wide.ad.jp/Linux/archlinux/$repo/os/$arch
EOF
  cat /etc/pacman.d/mirrorlist.bk >>/etc/pacman.d/mirrorlist

  waiting_for mirrorlist updated. Doing pacstrap base linux linux-firmware
  pacstrap /mnt base linux linux-firmware

  waiting_for genfstab
  genfstab -U /mnt >>/mnt/etc/fstab
}

setup_dot() {
  # clone dot
  waiting_for Install git
  pacman -Sy --noconfirm git
  waiting_for Clone dot
  curl -fSsL git.io/tr3s | bash
  # shellcheck disable=SC2154
  mv /root/.dot /mnt/root/
}

setup_bootctl() {
  # Setup systemd-boot
  ls -la boot
  # total 52212
  # drwxr-xr-x  2 root root     4096 Jan  1  1970 .
  # drwxr-xr-x 17 root root     4096 Jan 27 21:52 ..
  # -rwxr-xr-x  1 root root 34039839 Jan 27 21:52 initramfs-linux-fallback.img
  # -rwxr-xr-x  1 root root  8877197 Jan 27 21:52 initramfs-linux.img
  # -rwxr-xr-x  1 root root 10531168 Jan 27 21:52 vmlinuz-linux

  waiting_for bootctl install
  bootctl install
  # Created "/boot/EFI".
  # Created "/boot/EFI/systemd".
  # Created "/boot/EFI/BOOT".
  # Created "/boot/loader".
  # Created "/boot/loader/entries".
  # Created "/boot/EFI/Linux".
  # Copied "/usr/lib/systemd/boot/efi/systemd-bootx64.efi" to "/boot/EFI/systemd/systemd-bootx64.efi".
  # Copied "/usr/lib/systemd/boot/efi/systemd-bootx64.efi" to "/boot/EFI/BOOT/BOOTX64.EFI".
  # Created /etc/machine-info with KERNEL_INSTALL_LAYOUT=bls
  # Random seed file /boot/loader/random-seed successfully written (512 bytes).
  # Successfully initialized system token in EFI variable with 512 bytes.
  # Created EFI boot entry "Linux Boot Manager".

  ls -la boot
  # total 52220
  # drwxr-xr-x  4 root root     4096 Jan  1  1970 .
  # drwxr-xr-x 17 root root     4096 Jan 27 21:52 ..
  # drwxr-xr-x  5 root root     4096 Jan 27 21:56 EFI
  # -rwxr-xr-x  1 root root 34039839 Jan 27 21:52 initramfs-linux-fallback.img
  # -rwxr-xr-x  1 root root  8877197 Jan 27 21:52 initramfs-linux.img
  # drwxr-xr-x  3 root root     4096 Jan 27 21:56 loader
  # -rwxr-xr-x  1 root root 10531168 Jan 27 21:52 vmlinuz-linux

  waiting_for Create loader.conf
  cat <<EOF >>/boot/loader/loader.conf
default arch
timeout 3
editor no
EOF
  cat /boot/loader/loader.conf
  # #timeout 3
  # #console-mode keep
  # default arch
  # timeout 3
  # editor no

  waiting_for Create entiries arch.conf
  cat <<EOF >>/boot/loader/entries/arch.conf
title   Arch Linux
linux   /vmlinuz-linux
initrd  /initramfs-linux.img
options root=$(blkid -o export ${dst_dev}2 | grep ^UUID) rw
EOF

  # Check bootctl
  bootctl list
  # Boot Loader Entries:
  #         title: Arch Linux (default)
  #            id: arch.conf
  #        source: /boot/loader/entries/arch.conf
  #         linux: /vmlinuz-linux
  #        initrd: /initramfs-linux.img
  # ...
}

setup_passwd() {
  waiting_for Change root password
  # Change root password
  # shellcheck disable=SC2154
  echo -e "$root_pass\n$root_pass" |
    passwd
}

cat_iwd_static_ip() {
  # shellcheck disable=SC2154
  cat <<EOF
[IPv4]
Address=$ip_static
Netmask=255.255.255.0
Gateway=$ip_prefix.1
Broadcast=$ip_prefix.255
DNS=$ip_prefix.1
EOF
}

cat_iwd_main() {
  cat <<END
[General]
# Enable IP/Route setting via iwd (standalone dhcp client)
EnableNetworkConfiguration=true

# [Scan]
# DisablePeriodicScan=true

[Network]
NameResolvingService=systemd
# NameResolvingService=resolvconf
# EnableIPv6=true
END
}

bkup_to_root() {
  local _path=$1
  local _dst=/root/iwd$_path
  mkdir -p "$(dirname $_dst)"
  cat - >>$_dst
  echo "==> Saved to $_dst"
}

setup_for_bootstrap() {
  waiting_for Set up packages and networks
  # Install iwd!
  pacman -Syyu --noconfirm
  pacman -S --noconfirm which iwd openssh vim git

  echo 'nameserver 8.8.8.8' >>/etc/resolve.conf
  systemctl enable systemd-networkd
  systemctl enable iwd
  systemctl enable sshd

  waiting_for Save iwd sample to /root.
  cat_iwd_main | bkup_to_root /etc/iwd/main.conf
  # shellcheck disable=SC2154
  cat_iwd_static_ip | bkup_to_root $iwd_ssid_settings_path
  cat <<EOF >>/root/iwd/setup_after_iwd_connected
cp /root/etc/iwd/main.conf /etc/iwd/main.conf
cp /root$iwd_ssid_settings_path $iwd_ssid_settings_path
systemctl restart iwd
EOF
}

gen_conf_sample() {
  cat <<'EOF' >>$conf
export dst_dev=/dev/sdX
export ip_prefix=192.168.XXX
export ip_static=$ip_prefix.X
export ssid=XXXXX
export ssid_type=psk
export iwd_ssid_settings_path=/var/lib/iwd/$ssid.$ssid_type
export root_pass=XXXXX
export archuser_pass=XXXXX
export authorized_key='XXXX...'
EOF
  echo "==> sample generated!($conf)" 1>&2
}

check_conf() {
  if [[ -e $conf ]]; then
    source $conf
    return
  fi
  echo "==> No $conf exist!" 1>&2
  gen_conf_sample
  exit 1
}

setup_live() {
  : F7 attack and boot from usb
  : Select 'Arch Linux install medium (x86_64, UEFI)'
  ###################################
  # If Needed Dump operation via script!
  : script

  # If Needed default is us.
  : loadkeys jp106
  # If Needed
  : setfont ter-128n
  # Setup timedate
  : setup_timedate_for_live
  # Change root password for ssh access
  : passwd
  # Setup network
  : setup_network_for_live

  ###################################
  # If Needed Exit script
  : exit
}

main() {
  if [[ $1 -eq 1 ]]; then
    : setup_live
    return
  fi

  set -e
  check_conf

  if [[ $1 -eq 2 ]]; then
    ###################################
    # Setup from live
    setup_partitions
    setup_pacstrap
    setup_dot
    # shellcheck disable=SC2154
    echo "$archuser_pass" >/mnt/root/.dot/bin/lib/bootstrap/arch/pass
    # shellcheck disable=SC2154
    echo "$authorized_key" >/mnt/root/.dot/bin/lib/bootstrap/arch/pub
    mkdir /mnt/root/.ssh && chmod 700 /mnt/root/.ssh
    echo "$authorized_key" >/mnt/root/.ssh/authorized_keys
    cp -fv $0 /mnt/root/
    cp -fv $0.conf /mnt/root/
    waiting_for arch-chroot /mnt. Execute after arch-chroot '/root/create_fs 3'
    arch-chroot /mnt
    waiting_for Done. Execute 'reboot'
  elif [[ $1 -eq 3 ]]; then
    ###################################
    # Setup via arch-chroot
    setup_bootctl
    setup_passwd
    setup_for_bootstrap
    ###################################
    # Exit arch-chroot
    waiting_for End arch-chroot. Execute 'exit'
  fi
}

main "$@"
