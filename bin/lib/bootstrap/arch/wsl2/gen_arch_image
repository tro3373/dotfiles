#!/usr/bin/env bash

readonly current_dir=$(pwd)
readonly arch_iso_latest_url=http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/iso/latest/
readonly script_dir=$(
  cd "$(dirname ${BASH_SOURCE:-$0})"
  pwd
)
readonly tgz=ArchLinux.tar.gz
source $script_dir/../../../setup/funcs

usage() {
  cat <<EOF
Generate wsl2 arch image command
EOF
}

gen_arch_tgz() {
  local tmp_d=$(mktemp -d)
  exe cd $tmp_d
  local url=$(get_arch_iso_url_latest)
  log "> Downloading to $tmp_d from $url.."
  exe curl -LO $url
  exe sudo tar xzfp ./*.tar.gz
  exe cd root.x86_64
  exe sudo tar czfp $tgz .
  exe sudo mv -f $tgz $current_dir/
  echo "$current_dir/$tgz"
}

get_arch_iso_url_latest() {
  local fname=$(
    curl -fSsL $arch_iso_latest_url |
      grep href |
      grep --color 'tar.gz"' |
      sed -e 's,^.*href=",,g' -e 's,".*,,g'
  )
  echo "$arch_iso_latest_url/$fname"
}

cat_import_bat() {
  cat <<EOF
wsl --import ArchLinux %USERPROFILE%\wsl\ArchLinux $tgz
wsl -d ArchLinux
EOF
}

gen_import_bat() {
  cat_import_bat |
    if is_dry; then
      log "=> below bat will be gen."
      cat - 1>&2
    else
      cat - | gen_bat $current_dir/import_wsl_arch_image.bat
    fi
}

main() {
  set -e
  initialize_args "$@"
  if ! os unix; then
    not_supported
    exit 1
  fi
  local import_image_path=$(gen_arch_tgz)
  local import_bat_path=$(gen_import_bat)
  log "==>  $import_image_path gened."
  log "==>  $import_bat_path gened."
  show_dummy_warn_if_needed
  ink green "Done!"
}
main "$@"
