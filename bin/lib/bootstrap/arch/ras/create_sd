#!/usr/bin/env bash

readonly command_name=$(basename $0)
readonly url_ras3=http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz
readonly url_ras4=http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-4-latest.tar.gz
readonly script_dir=$(
  cd "$(dirname ${BASH_SOURCE:-$0})"
  pwd
)
export PATH=$script_dir/../../../../:$PATH
source $script_dir/../../../setup/funcs

mkfs_ext4=mkfs.ext4
mkfs_vfat=mkfs.vfat

usage() {
  cat <<EOF
Create archlinux sd image command for raspberry pi 3 or 4.

Usage:
  $command_name <device_id> [<pi_version>] [option]
Options
  using funcs initialize_args
    -h|--help : Show this usage
    -d,-e,..
  device_id: ex) /dev/sde or /dev/sdb ...
  pi_version: specify 3 if you create pi 3. default is pi 4.

EOF
}

error() { echo "$*" 1>&2; }

check() {
  if ! os ubuntu; then
    not_supported
    exit 1
  fi
  has_check fdisk
  has_check $mkfs_vfat
  has_check $mkfs_ext4
  has_check bsdtar
  root_check
  if [[ -z $target_device_id ]]; then
    error "Specify target device id."
    exit 1
  fi
}

check_target_device_partitions() {
  if is_dry; then
    return
  fi
  if ! fdisk -l $target_device_id >&/dev/null; then
    error "No such device $target_device_id"
    exit 1
  fi
  if ! fdisk -l $target_device_id | grep "$target_device_id1" >&/dev/null; then
    error "No such device $target_device_id1"
    exit 1
  fi
  if ! fdisk -l $target_device_id | grep "$target_device_id2" >&/dev/null; then
    error "No such device $target_device_id2"
    exit 1
  fi
}

fdisk_usage() {
  cat <<'EOF'

#############################################################################################
# >>>>>>>>>>>> execute below..
# At the fdisk prompt, delete old partitions and create a new one:
- Type o. This will clear out any partitions on the drive.
- Type p to list partitions. There should be no partitions left.
- Type n, then p for primary, 1 for the first partition on the drive, press ENTER to accept the default first sector, then type +200M for the last sector.
- Type t, then c to set the first partition to type W95 FAT32 (LBA).
- Type n, then p for primary, 2 for the second partition on the drive, and then press ENTER twice to accept the default first and last sector.
- Write the partition table and exit by typing w.
#############################################################################################
EOF
}

main() {
  set -e
  if is_mac; then
    mkfs_ext4=/usr/local/opt/e2fsprogs/sbin/mkfs.ext4
    mkfs_vfat=$(find /usr/local/Cellar/dosfstools/*/sbin/mkfs.vfat)
  fi
  initialize_args "$@" -d
  # shellcheck disable=SC2154
  target_device_id="${args[0]}"
  target_device_id1=${target_device_id}1
  target_device_id2=${target_device_id}2
  check

  local url=$url_ras4
  # shellcheck disable=SC2154
  local pi_version=${args[1]}
  if [[ $pi_version -eq 3 ]]; then
    echo ">> Target setup pi versoin is $pi_version"
    url=$url_ras3
  fi

  if is_mac; then
    diskutil list
    exe diskutil unMountDisk ${target_device_id}
    # format sd ==> NG
    # local disk_label=RPI
    # MS-DOS: FAT32
    # exe diskutil eraseDisk MS-DOS $disk_label ${target_device_id}
    # https://apple.stackexchange.com/questions/154566/create-a-partition-on-sd-card-for-ext4-filesystem
    # MacOS cannot see ext partitions...
    # exe diskutil partitionDisk ${target_device_id} 2 MBRFormat MS-DOS "boot" 200M JournaledHFS+ "root"
  else
    # exe fdisk -l
    fdisk_usage | ink yellow
    exe fdisk ${target_device_id}
  fi

  check_target_device_partitions

  [[ ! -e tmp ]] && exe mkdir -p tmp
  exe cd tmp

  exe mkfs.vfat $target_device_id1
  exe mkdir -p boot
  exe mount $target_device_id1 boot

  exe $mkfs_ext4 $target_device_id2
  exe mkdir -p root
  exe mount $target_device_id2 root
  local fnm=${url##*/}
  if [[ ! -e $fnm ]]; then
    exe curl -fLO $url
  fi
  exe bsdtar -xpf $fnm -C root
  exe sync

  exe mv root/boot/* boot
  exe umount boot root

  show_dummy_warn_if_needed
  ink green "Done!"
}
main "$@"
