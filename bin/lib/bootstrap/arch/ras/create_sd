#!/usr/bin/env bash

command_name=$(basename "$0") && readonly command_name
readonly url_ras=http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz
readonly url_ras_boot=http://nj.us.mirror.archlinuxarm.org/aarch64/core/linux-rpi-6.12.11-3-aarch64.pkg.tar.xz
script_dir=$(cd "$(dirname "${BASH_SOURCE:-$0}")" && pwd) && readonly script_dir
export PATH=$script_dir/../../../../:$PATH
source "$script_dir"/../../../setup/funcs

readonly send_files=(
  "$script_dir/../bootstrap"
  "$script_dir/../../../setup/funcs"
  "$script_dir/../../../setup/funcs_arch"
  "$script_dir/pub"
  "$script_dir/start_bootstrap"
  "$script_dir/bootstrap.conf"
)

mkfs_ext4=mkfs.ext4
mkfs_vfat=mkfs.vfat

target_device_id=
target_device_id1=
target_device_id2=

usage() {
  cat <<EOF
Create archlinux sd image command for raspberry pi 5

Usage:
  $command_name <device_id> [option]
Options
  using funcs initialize_args
    -h|--help : Show this usage
    -d,-e,..
  device_id: ex) /dev/sde or /dev/sdb ...

EOF
}

initialize() {
  set -e
  initialize_args "$@" -d

  # shellcheck disable=SC2154
  target_device_id="${args[0]}"
  target_device_id1=${target_device_id}1
  target_device_id2=${target_device_id}2
  check
}

check() {
  if ! os arch; then
    not_supported
    exit 1
  fi
  check_has fdisk
  check_has "$mkfs_vfat"
  check_has $mkfs_ext4
  check_has bsdtar
  check_root
  if [[ -z $target_device_id ]]; then
    elog "Specify target device id."
    exit 1
  fi
  for _path in "${send_files[@]}"; do
    [[ -e $_path ]] && continue
    elog "=> No $_path exist."
    exit 1
  done
}

fdisk_usage() {
  cat <<'EOF'

#############################################################################################
# >>>>>>>>>>>> execute below..
# At the fdisk prompt, delete old partitions and create a new one:
- Type o. This will clear out any partitions on the drive.
- Type p to list partitions. There should be no partitions left.
- Type n, then p for primary, 1 for the first partition on the drive, press ENTER to accept the default first sector, then type +200M for the last sector.
- Type t, then c to set the first partition to type W95 FAT32 (LBA).
- Type n, then p for primary, 2 for the second partition on the drive, and then press ENTER twice to accept the default first and last sector.
- Write the partition table and exit by typing w.
#############################################################################################
EOF
}

dl_images() {
  dl_if_not_exist "$url_ras"
  dl_if_not_exist "$url_ras_boot"
}

dl_if_not_exist() {
  local url=$1
  local fnm=${url##*/}
  if [[ -e $fnm ]]; then
    return
  fi
  exe curl -fLO "$url"
}

create_sd_partitions() {
  cat_sfdisk_cmd | cat_do sfdisk -f --quiet --wipe always "$target_device_id"
  check_target_device_partitions

  exe mkfs.vfat -F 32 "$target_device_id1"
  exe mkfs.ext4 -E lazy_itable_init=0,lazy_journal_init=0 -F "$target_device_id2"
}

cat_sfdisk_cmd() {
  cat <<'EOF'
,256M,0c,
,,,
EOF
}

check_target_device_partitions() {
  if is_dry; then
    return
  fi
  if ! fdisk -l "$target_device_id" >&/dev/null; then
    elog "No such device $target_device_id"
    exit 1
  fi
  if ! fdisk -l "$target_device_id" | grep "$target_device_id1" >&/dev/null; then
    elog "No such device $target_device_id1"
    exit 1
  fi
  if ! fdisk -l "$target_device_id" | grep "$target_device_id2" >&/dev/null; then
    elog "No such device $target_device_id2"
    exit 1
  fi
}

mount_sd() {
  exe mkdir -p /mnt/sd
  exe mount "$target_device_id2" /mnt/sd
  exe mkdir -p /mnt/sd/boot
  exe mount "$target_device_id1" /mnt/sd/boot
}

umount_sd() {
  exe umount /mnt/sd/boot
  exe umount /mnt/sd
}

write_images() {
  local fnm_ras=${url_ras##*/}
  local fnm_ras_boot=${url_ras_boot##*/}
  exe bsdtar -xpf "$fnm_ras" -C /mnt/sd
  exe rm -rf /mnt/sd/boot/*

  temp_=$(mktemp -d)
  exe tar xf "$fnm_ras_boot" -C "$temp_"
  exe cp -rf "$temp_"/boot/* /mnt/sd/boot/
}

setup_sd_additional() {
  setup_sd_ssh
  setup_sd_bootstrap
}

setup_sd_ssh() {
  exe mkdir -p /mnt/sd/home/alarm/.ssh
  exe cp "$script_dir/pub" /mnt/sd/home/alarm/.ssh/authorized_keys
  exe chmod 700 /mnt/sd/home/alarm/.ssh
  exe chmod 600 /mnt/sd/home/alarm/.ssh/authorized_keys
}

setup_sd_bootstrap() {
  exe mkdir -p /mnt/sd/root/bin
  for _path in "${send_files[@]}"; do
    exe cp "$_path" /mnt/sd/root/bin/
  done
}

main() {
  initialize "$@"

  dl_images
  create_sd_partitions
  mount_sd
  write_images

  setup_sd_additional

  exe sync
  umount_sd
  show_dummy_warn_if_needed
  ilog "Done!"
}
main "$@"
