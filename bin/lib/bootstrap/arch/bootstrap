#!/usr/bin/env bash

set -e
readonly command_name=$(basename $0)
readonly script_dir=$(
  cd "$(dirname ${BASH_SOURCE:-$0})"
  pwd
)
readonly username=archuser
readonly userpass_path=$script_dir/pass
readonly userpub_path=$script_dir/pub
# # load funcs
# source $script_dir/funcs arch $username
# source $script_dir/funcs_arch

ip=
host=

usage() {
  cat <<EOF

Bootstrap setup for  archlinux system.

Usage:
  $command_name [option]
Options
  -h|--help : Show this usage
  -i|--ip   : specify static ip adress (optional)
  -hst|--host : specify hostname (optional)

EOF
}

load_funcs() {
  local search_dir=("$script_dir" "$script_dir/../../setup")
  for d in "${search_dir[@]}"; do
    [[ ! -e $d/funcs ]] && continue
    # shellcheck disable=SC1091
    source $d/funcs arch $username
    # shellcheck disable=SC1091
    source $d/funcs_arch
    break
  done
}

check() {
  if is_bootstrapped; then
    log "=> Already bootstraped." 1>&2
    exit 0
  fi
  root_check
  # if [[ ! -e $userpass_path ]]; then
  #   log "=> No $userpass_path (pass file for $username) exist."
  #   exit 1
  # fi
  if ! is_wsl && [[ ! -e $userpub_path ]]; then
    log "=> No $userpub_path (pub key for $username) exist."
    exit 1
  fi
}

initialize() {
  load_funcs
  # shellcheck disable=SC2034
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -e | --exec) dry_run=0 ;;
      -i | --ip) shift && ip=$1 ;;
      -hst | --host) shift && host=$1 ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done

  check
}

finalize() {
  bootstrapped
  is_wsl && return
  exe reboot
}

setup_pacman() {
  improve_pacman_millerlist
  setup_pac_key
  improve_pacman_conf
  setup_gnupg_keyserver_settings /root
  setup_gnupg
  improve_pacman_aria2
  update_and_add_pacman_packages base base-devel git curl sudo vim wget grep sed which unzip gzip openssh zsh
  is_wsl && return
  update_and_add_pacman_packages systemd-timesyncd
}

cat_userpass() {
  if [[ ! -e $userpass_path ]]; then
    return
  fi
  cat <$userpass_path | head -1
}

setup_user() {
  local _pass=$(cat_userpass)
  create_user $username "$_pass"
  setup_gnupg_keyserver_settings /home/$username
  setup_gnupg
  setup_sudoers $username
  setup_login_shell $username
  setup_user_authorized_keys $username $userpub_path
  # shellcheck disable=SC2154
  clone_dot $username "${args[@]}"

  if [[ -n $_pass ]]; then
    change_passwd root "$_pass"
  fi
  # if is_arm; then
  #   del_user alarm
  # fi
  if is_wsl; then
    cat <<EOF >>/etc/wsl.conf
[user]
default=$username
EOF
  fi
}

sudo() {
  local _sudo=$(type -f -p sudo)
  $_sudo "$@"
}

main() {
  initialize "$@"
  setup_pacman
  # setup_timezone
  setup_locale
  setup_user
  if [[ -n $host ]]; then
    setup_hostname $host
  fi
  if [[ -n $ip ]]; then
    gen_network_eth0 $ip
  fi
  finalize
  show_dummy_warn_if_needed
}
main "$@"
