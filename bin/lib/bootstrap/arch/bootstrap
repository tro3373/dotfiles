#!/usr/bin/env bash

set -e
command_name=$(basename "$0") && readonly command_name
script_dir=$(cd "$(dirname "${BASH_SOURCE:-$0}")" && pwd) && readonly script_dir
readonly username=archuser
readonly userpub_path=$script_dir/pub
readonly bootstrap_conf=$script_dir/$command_name.conf

# # load funcs
# source $script_dir/funcs arch $username
# source $script_dir/funcs_arch

ip=
host=
pass=

usage() {
  cat <<EOF

Bootstrap setup for archlinux system.

Usage:
  $command_name [option]
Options
  -h|--help : Show this usage
  -i|--ip   : specify static ip adress (optional)
  -hst|--host : specify hostname (optional)
  -p|--pass : specify pass (optional)

EOF
}

load_funcs() {
  local search_dir=("$script_dir" "$script_dir/../../setup")
  for d in "${search_dir[@]}"; do
    [[ ! -e $d/funcs ]] && continue
    # shellcheck disable=SC1091
    source "$d"/funcs arch $username
    # shellcheck disable=SC1091
    source "$d"/funcs_arch
    break
  done
}

check() {
  if is_bootstrapped; then
    log "=> Already bootstraped." 1>&2
    exit 0
  fi
  check_root
  if [[ ! -e $bootstrap_conf ]]; then
    log "=> No $bootstrap_conf exist."
    exit 1
  fi
  if ! is_wsl && [[ ! -e $userpub_path ]]; then
    log "=> No $userpub_path (pub key for $username) exist."
    exit 1
  fi
}

initialize() {
  load_funcs
  check

  # shellcheck disable=SC1090
  source "$bootstrap_conf"
  # shellcheck disable=SC2034
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -e | --exec) dry_run=0 ;;
      -i | --ip) shift && ip=$1 ;;
      -hst | --host) shift && host=$1 ;;
      -p | --pass) shift && pass=$1 ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
}

finalize() {
  bootstrapped
  is_wsl && return
  exe reboot
}

setup_pacman() {
  # Disabled. No need to update pacman.conf
  # improve_pacman_millerlist
  setup_raspi_kernel
  improve_pacman_conf
  setup_pac_key
  setup_gnupg
  setup_gnupg_keyserver_settings /root
  improve_pacman_aria2
  update_and_add_pacman_packages base base-devel git curl sudo vim wget grep sed which unzip gzip openssh zsh iw wpa_supplicant
  setup_additional_pacakges
  # ! is_arm && return
  # update_and_add_pacman_packages systemd-timesyncd
}

setup_user() {
  create_user $username "$pass"
  setup_gnupg_keyserver_settings /home/$username
  # setup_gnupg norefresh
  setup_sudoers $username
  setup_login_shell $username
  setup_user_authorized_keys $username "$userpub_path"
  # shellcheck disable=SC2154
  setup_dot $username "${args[@]}"

  change_passwd root "$pass"
  # Error if alarm user used
  # if is_arm; then
  #   del_user alarm
  # fi
  if is_wsl; then
    cat <<EOF >>/etc/wsl.conf
[user]
default=$username
# for work(vpc?...)
[network]
generateResolvConf = false
# enable systemd!
[boot]
systemd=true
EOF
  fi
}

sudo() {
  local _sudo
  _sudo=$(type -f -p sudo | sed 's,^.* ,,g')
  $_sudo "$@"
}

main() {
  initialize "$@"
  setup_pacman
  # setup_timezone
  setup_locale
  if [[ -n $pass ]]; then
    setup_user
  fi
  if [[ -n $host ]]; then
    setup_hostname "$host"
  fi
  if [[ -n $ip ]]; then
    gen_network_eth0 "$ip"
    setup_network_wlan "$ip"
  fi
  finalize
  show_dummy_warn_if_needed
}
main "$@"
