#!/usr/bin/env bash

readonly url_ras3=http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz
readonly url_ras4=http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-4-latest.tar.gz
readonly script_dir=$(
  cd "$(dirname ${BASH_SOURCE:-$0})"
  pwd
)
# TODO modify this device id.
target_device_id=/dev/disk2
source $script_dir/../setup/funcs

usage() {
  cat <<EOF
Create archlinux sd image command for raspberry pi 3.
EOF
}

check() {
  if is_dry; then
    return
  fi
  if ! os unix; then
    not_supported
    exit 1
  fi
  has_check fdisk
  has_check $mkdfs_vfat
  has_check $mkfs_ext4
  has_check bsdtar
  root_check
}

main() {
  set -e
  local mkfs_ext4=mkfs.ext4
  local mkdfs_vfat=mkdfs.vfat
  if is_mac; then
    mkfs_ext4=/usr/local/opt/e2fsprogs/sbin/mkfs.ext4
    mkdfs_vfat=$(find /usr/local/Cellar/dosfstools/*/sbin/mkfs.vfat)
  fi
  initialize_args "$@"
  check

  url=$url_ras4
  # shellcheck disable=SC2154
  if [[ ${args[*]} == ras3 ]]; then
    url=$url_ras3
  fi

  if is_mac; then
    diskutil list
    mexe diskutil unMountDisk ${target_device_id}
    # format sd
    local disk_label=RPI
    mexe sudo diskutil eraseDisk MS-DOS $disk_label ${target_device_id}
    mexe sudo diskutil partitionDisk /dev/disk2 2 MBRFormat boot 200M JournaledHFS+ root
  else
    fdisk -l
    mexe fdisk ${target_device_id}
    # # At the fdisk prompt, delete old partitions and create a new one:
    # - Type o. This will clear out any partitions on the drive.
    # - Type p to list partitions. There should be no partitions left.
    # - Type n, then p for primary, 1 for the first partition on the drive, press ENTER to accept the default first sector, then type +200M for the last sector.
    # - Type t, then c to set the first partition to type W95 FAT32 (LBA).
    # - Type n, then p for primary, 2 for the second partition on the drive, and then press ENTER twice to accept the default first and last sector.
    # - Write the partition table and exit by typing w.
  fi

  mexe mkfs.vfat ${target_device_id}1
  mexe mkdir boot
  mexe mount ${target_device_id}1 boot

  mexe $mkfs_ext4 ${target_device_id}2
  mexe mkdir root
  mexe mount ${target_device_id}2 root
  mexe curl -fLO $url
  local fnm=${url##*/}
  mexe bsdtar -xpf $fnm -C root
  mexe sync

  mexe mv root/boot/* boot
  mexe umount boot root

  show_dummy_warn_if_needed
  ink green "Done!"
}
main "$@"
