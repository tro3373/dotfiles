#!/usr/bin/env -S bash -e

command_name=$(basename "$0") && readonly command_name
out_file=out.pdf
dummy="echo"
is_dummy() { [[ -n $dummy ]]; }
args=()
usage() {
  cat <<EOF

Unite pdf.

  Usage:
      $command_name [option]
    Options
      -h|--help : Show this usage

EOF
}
has() { command -v "${1}" >&/dev/null; }
add_args() { args+=("$@"); }
check() {
  if ! has convert && ! has pdftk && ! has pdfcpu; then
    echo "No support sub command(convert,pdftk,pdfcpu) exist" 1>&2
    exit 1
  fi
  if [[ -z $src_files ]]; then
    echo "Specify pdf files" 1>&2
    exit 1
  fi
  if [[ -e $out_file ]]; then
    echo "Already $out_file exist" 1>&2
    exit 1
  fi
}
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -e) dummy= ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      -o | --out) shift && out_file=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  src_files="${args[*]}"
  if [[ -p /dev/stdin ]]; then
    src_files="$src_files $(cat <&0 | sort -u | while read -r line; do printf "%s " "$line"; done)"
  fi
  check
}
_convert() {
  # shellcheck disable=SC2086
  $dummy convert $src_files "$out_file"
}
_pdftk() {
  # shellcheck disable=SC2086
  $dummy pdftk $src_files cat output "$out_file"
}
_pdfcpu() {
  # shellcheck disable=SC2086
  $dummy pdfcpu merge "$out_file" $src_files
}

main() {
  initialize "$@"
  if has convert; then
    _convert
  elif has pdftk; then
    _pdftk
  elif has pdfcpu; then
    _pdfcpu
  fi
  echo "Done! $out_file generated" | ink green
}
main "$@"
