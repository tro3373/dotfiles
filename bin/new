#!/usr/bin/env bash

current_dir=$(pwd)
script_dir=$(cd $(dirname $0); pwd)
command_name=$(basename $0)

dotbin=${DOTPATH:-~/.dot}/bin
target=
usage() {
    cat <<EOF

Create new executable shell file.

  Usage:
      $command_name [option] <create_file_name>
    Options
      -h|--help : Show this usage
      -b|--bin : Create new command file in $dotbin
      --hard|-l|--long : Use hard template

EOF
}

has() {
    which ${1} >/dev/null 2>&1
    return $?
}

set_args() {
    for arg in "$@"; do
        case "$arg" in
            -h|--help)
                usage
                exit 0
                ;;
            -b|--bin)
                # file=${arg#*=}
                tobin=1
                ;;
            --hard|-l|--long)
                hard=1
                ;;
            *)
                target="$arg"
                ;;
        esac
    done
}

check() {
    if [[ -z $target ]]; then
        echo "Specify target command name." 1>&2
        usage
        exit 1
    fi
}

initialize() {
    set_args "$@"
    check
}

cat_template() {
    local hard=$1
    if [[ $hard -eq 1 ]]; then
        cat <<'EOL'
#!/usr/bin/env bash

current_dir=$(pwd)
script_dir=$(cd $(dirname $0); pwd)
command_name=$(basename $0)
args=()

usage() {
    cat <<EOF

Description for this command.

  Usage:
      $command_name [option]
    Options
      -h|--help : Show this usage

EOF
}

has() { which $1 >& /dev/null; }
add_args() { args=("${args[@]}" "$@"); }
#add_args() { args+=("$@"); }

initialize() {
    while true; do
        [[ -z $1 ]] && break
        case "$1" in
            -h|--help) usage && exit 0  ;;
            #-f*|--file*) file=${1#*=} ;;
            #-f|--file) shift && file=$1 ;;
            *) add_args "$1"            ;;
        esac
        shift
    done
    all_args="${args[@]}"
}

main() {
    initialize "$@"
    for arg in "${args[@]}"; do
        echo "Arguments: $arg"
    done
    echo $file
}
main "$@"
EOL
    else
        cat <<'EOL'
#!/usr/bin/env bash

current_dir=$(pwd)
script_dir=$(cd $(dirname $0); pwd)
has() { which ${1} >& /dev/null; }

main() {
    :
}
main "$@"
EOL
    fi
}

main(){
    initialize "$@"
    local out=$current_dir
    if [[ $tobin -eq 1 ]]; then
        out=$dotbin
    fi
    local target=$out/$target
    if [[ -e $target ]]; then
        echo "Target $target is exist." 1>&2
        exit 1
    fi
    cat_template $hard > $target
    chmod 775 $target
    echo "==> New shell template file generated to $target."
    echo "==> Edit it?(y/N)"
    read yes_i_edit
    if [[ $yes_i_edit =~ [yY] ]]; then
        vim $target
    fi
}
main "$@"

