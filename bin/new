#!/usr/bin/env -S bash -e

script_dir=$(cd "$(dirname "${BASH_SOURCE:-$0}")" && pwd) && readonly script_dir
lib_dir="$script_dir/lib/new" && readonly lib_dir
command_name=$(basename "$0") && readonly command_name
current_dir=$(pwd) && readonly current_dir
args=()
dummy="echo"
mode=bash
type=def
name=sample
dst_files=()

usage() {
  cat <<EOF

Create new executable shell file.

  Usage:
      $command_name [option] <create_file_name>
    Options
      -h|--help     : Show this usage
      -q|--quiet    : Quiet mode
      -e|--execute  : Execute. Default is dry-run

    ex)
      new command_name      : Create new bash command_name
      new bash command_name : Create new bash command_name
      new go cob            : Create new go command project via cobra
      new go cli            : Create new go command project via urfave/cli
      new make go           : Create new make go
      new make sls
      new make tf
      new make docker-compose

    Existing template is..
$(if has tree; then tree "$lib_dir"; else find "$lib_dir"; fi | sed -e 's,^,      ,g')

EOF
}

# is_dummy() { [[ -n $dummy ]]; }
is_mode_bash() { [[ $mode == "bash" ]]; }
has() { command -v "${1}" >&/dev/null; }
add_args() { args+=("$@"); }
add_dst_files() { dst_files+=("$@"); }
_log() {
  # shellcheck disable=SC2145
  echo "$(date +"%Y-%m-%d %H:%M:%S") ${@:2}" | ink "$1"
}
log() { _log cyan "$*"; }
warn() { _log yellow "$*"; }
error() {
  _log red "$*"
  exit 1
}

mkdir_if_needed() {
  [[ -e $1 ]] && return
  $dummy mkdir -p "$1"
}

initialize() {
  set -eo pipefail
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      # -e) dummy= ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      -h | --help) usage && exit 0 ;;
      -q | --quiet) quiet=1 ;;
      -e | --execute) dummy= ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  set_arg
  check
}
set_arg() {
  local len=${#args[@]}
  [[ $len -eq 0 ]] && return
  if [[ $len -eq 1 ]]; then
    name="${args[0]}"
    return
  fi
  # Below is over 2 args length case
  mode="${args[0]}"
  type="${args[1]}"
  name="${args[2]}"
}
check() {
  if [[ ! -e $lib_dir/$mode/$type ]]; then
    usage
    error "Not supported mode($mode) type($type)"
  fi
}

generate() {
  while read -r src_dir; do
    [[ -z $src_dir ]] && continue
    [[ ! -e $src_dir ]] && continue
    generate_for_dir
  done < <(fire_src_dirs)

  if [[ $mode != "go" ]]; then
    return
  fi
  generate_additional_for_go
}

fire_src_dirs() {
  cat <<EOF
$lib_dir/$mode/.com
$lib_dir/$mode/$type/.com
$lib_dir/$mode/$type
EOF
}

generate_for_dir() {
  while read -r src_f; do
    [[ -z $src_f ]] && continue
    [[ $src_f =~ ^#.* ]] && continue
    local rel_src_f rel_src_f_for_log dst_f
    rel_src_f=${src_f/$src_dir\//}
    dst_f="$current_dir/$rel_src_f"
    if is_mode_bash; then
      dst_f=$current_dir/$name
    fi
    if [[ -e $dst_f ]]; then
      timestamp=$(date +%Y%m%d.%H%M%S)
      warn "==> Already dst file exist Adding timestamp.. $dst_f ==> $dst_f.$timestamp"
      dst_f="$dst_f.$timestamp"
    fi
    mkdir_if_needed "$(dirname "$dst_f")"
    add_dst_files "$dst_f"
    rel_src_f_for_log=${src_f/$lib_dir\//}
    log "==> Generating template from $rel_src_f_for_log.."
    $dummy cp -p "$src_f" "$dst_f"
  done < <(find "$src_dir/" -type f)
}

generate_additional_for_go() {
  local owner
  owner=$(git_owner)
  local pkg="github.com/$owner/$name"
  $dummy go mod init "$pkg"
  if [[ $type == "cob" ]]; then
    $dummy cobra-cli init # --pkg-name "$pkg"
  fi
  $dummy go mod tidy
  $dummy goreleaser init
  # $dummy new make go -q
}

edit_if_needed() {
  [[ -n $dummy ]] && return
  [[ $quiet -eq 1 ]] && return
  log "==> New template file generated."
  log "==> Edit it?(Y/n)"
  read -r yes_i_edit
  if [[ $yes_i_edit =~ [nN] ]]; then
    return
  fi
  local _vim=vim
  has nvim && _vim=nvim
  "$_vim" -p "${dst_files[@]}"
}

main() {
  initialize "$@"
  # local out=$current_dir
  generate
  edit_if_needed
}
main "$@"
