#!/usr/bin/env -S bash -e

script_dir=$(cd "$(dirname "${BASH_SOURCE:-$0}")" && pwd) && readonly script_dir
command_name=$(basename "$0") && readonly command_name
config=".$(basename "$0")"
args=()
debug=0
dummy=
message=
upload_file=0
upload_file_path=
as_code=0
should_upload_file=0

usage() {
  cat <<EOF
Send message to slack
when no argument specified, we use normal input.

slk.conf is config file.
when config file exist, slack send setting loaded from config file.
  Usage:
      $command_name [send message] [option]
    Options
      -h|--help : Show this usage
      -d|--debug : Debug option
      -g|--genconf : generate sample conf
      -f|--file : send file.
      -c|--channel : specify channel(#hogehoge), or user(@hogehoge)
      -co|--code : as code
      -t|--token : specify token
      -n|--name : specify username(botname)
      -i|--icon : specify icon
EOF
}

dlog() {
  if [[ $debug -eq 1 ]]; then
    echo "$(date +"%Y-%m-%d %H:%M:%S") $*" 1>&2
  fi
}
has() { command -v "${1}" >&/dev/null; }
add_args() { args=("${args[@]}" "$@"); }
gen_conf() {
  local dst=$HOME/$config
  if [[ -e $dst ]]; then
    echo "Already slk.conf exist." 1>&2
    exit 1
  fi
  cat <<'EOF' >>"$dst"
#!/usr/bin/env bash

# shellcheck disable=SC2034
token=specify api token
name=MyBot
icon=:penguin:
channel=specify #channel_name, or @user_name
EOF
  echo "==> $dst generated."
}

load_config() {
  for d in "$HOME" "$script_dir"; do
    local _conf="$d/$config"
    if [[ ! -e $_conf ]]; then
      continue
    fi
    # echo "==> Loading from $_conf"
    # shellcheck disable=SC1090
    source "$_conf"
    return
  done
}

initialize() {
  token=
  load_config
  name=${name:-"MyBot"}
  icon=${icon:-":penguin:"}
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -d | --debug) debug=1 ;;
      -g | --genconf) gen_conf && exit 0 ;;
      -f | --file) upload_file=1 ;;
      -c | --channel) shift && channel=$1 ;;
      -co | --code) as_code=1 ;;
      -t | --token) shift && token=$1 ;;
      # -u|--url) shift && url=$1 ;;
      -n | --name) shift && name=$1 ;;
      -i | --icon) shift && icon=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done

  if [[ -z $token ]]; then
    usage
    echo ">> Specify token." 1>&2
    exit 1
  fi

  local _args=${args[*]}
  local _in=$_args
  if [[ -p /dev/stdin ]]; then
    _in=$(cat <&0)
  fi

  if [[ -z $_in ]]; then
    usage
    echo ">> Specify args or stdin." 1>&2
    exit 1
  fi

  message="$_in"
  if [[ $upload_file -eq 1 ]]; then
    if [[ -e $message ]]; then
      upload_file_path=$message
    fi
    return
  fi
  if is_large_message; then
    should_upload_file=1
    return
  fi
  if [[ $as_code -eq 1 ]]; then
    # message="\`\`\`$message\`\`\`"
    : TODO
  fi
}

is_large_message() {
  local n
  n=$(echo -e "$message" | wc -l)
  test "$n" -gt 10
}

lchannel() {
  local _user _channel
  case "${channel}" in
    @*)
      _user=$(
        curl -k -s -X POST https://slack.com/api/users.list --data-urlencode "token=${token}" 2>&1 |
          jq -r ".members | map(select(.name == \"${channel/@/}\" or .profile.display_name == \"${channel/@/}\")) | .[0].id"
      )
      _channel=$(
        curl -k -s -X POST https://slack.com/api/im.list --data-urlencode "token=${token}" 2>&1 |
          jq -r ".ims | map(select(.user == \"${_user}\")) | .[].id"
      )
      if [[ -z $_channel ]]; then
        echo "$_user"
        return
      fi
      echo "${_channel}"
      ;;
    *) echo "${channel}" ;;
  esac
}

send() {
  local _filename
  export http_proxy=
  export https_proxy=
  if [[ -n $upload_file_path ]]; then
    dlog "==> Uploading file from $upload_file_path"
    _filename=$(basename "$upload_file_path")
    # ${filetype:+ --form "filetype=${filetype}"} \
    # ${title:+ --form "title=${title}"} \
    $dummy curl -k -fSsL -X POST https://slack.com/api/files.upload \
      ${channel:+ --form-string "channels=$(lchannel)"} \
      ${upload_file_path:+ --form "file=@${upload_file_path}"} \
      ${_filename:+ --form "filename=${_filename}"} \
      --form "token=${token}"
    return
  fi

  if [[ $upload_file -eq 1 || $should_upload_file -eq 1 ]]; then
    dlog "==> Uploading as file. upload_file: $upload_file, should_upload_file: $should_upload_file"
    # ${_filename:+ --data-urlencode "filename=${_filename}"} \
    # ${filetype:+ --data-urlencode "filetype=${filetype}"} \
    # ${title:+ --data-urlencode "title=${title}"} \
    echo -e "$message" |
      $dummy curl -k -fSsL -X POST https://slack.com/api/files.upload \
        ${channel:+ --data-urlencode "channels=$(lchannel)"} \
        ${icon:+ --data-urlencode "icon_emoji=$icon"} \
        ${name:+ --data-urlencode "username=$name"} \
        --data-urlencode "token=${token}" \
        --data-urlencode content@-
    return
  fi

  dlog "==> Sending message"
  echo -e "$message" |
    $dummy curl -k -fSsL -X POST https://slack.com/api/chat.postMessage \
      ${channel:+ --data-urlencode "channel=$(lchannel)"} \
      ${icon:+ --data-urlencode "icon_emoji=$icon"} \
      ${name:+ --data-urlencode "username=$name"} \
      --data-urlencode "token=$token" \
      --data-urlencode text@-
}

main() {
  initialize "$@"
  send |
    if [[ $debug -eq 1 ]]; then
      cat - | jq .
    else
      cat - | jq ".ok"
    fi
}
main "$@"
