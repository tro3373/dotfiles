#!/usr/bin/env bash

command_name=$(basename "$0") && readonly command_name
readonly depends=(gh curl fzf jq llm)
issues=
title=
body=
target_tmp_dir=
target_branch=
current_branch=
compact=0

usage() {
  cat <<EOF

Make a pull request via llm from git diff and commit list.

  Usage:
      $command_name [option] [base_branch]
    Options
      -h|--help     : Show this usage
      -i|--issue    : Issue number to link with the PR
      -t|--title "" : Specify title directly
      -b|--body ""  : Specify body directly
      -d|--dir      : Specify target_tmp_dir
      -c|--compact  : Compact mode

EOF
}

check() { hass "${depends[@]}"; }
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      # -e) dummy= ;;
      # -f*|--file*) file=${1#*=} ;;
      # -f|--file) shift && file=$1 ;;
      -i | --issue) shift && issues="$1" ;;
      -t | --title) shift && title="$1" ;;
      -b | --body) shift && body="$1" ;;
      -d | --dir) shift && target_tmp_dir=$1 ;;
      -c | --compact) compact=1 ;;
      *) target_branch=$1 ;;
    esac
    shift
  done
  check
  trap end 0 1 2 3 15
  set -eo pipefail
  current_branch=$(git rev-parse --abbrev-ref HEAD)
}

find_target_branch_with_fetch() {
  branches=(develop main)
  if [[ $current_branch =~ ^(main|master)$ ]]; then
    elog "==> Current branch is $current_branch. Please checkout to other branch."
  fi
  if [[ $current_branch == "develop" ]]; then
    wlog "==> Current branch is $current_branch. Local changes will be pushed to $current_branch."
    wlog "==> Press Enter to continue..(Cancel: Ctrl+C)"
    read -r _
    branches=(main master)
  fi

  # Fetch the latest changes from the remote repository
  ilog "==> Git fetching.."
  git fetch origin

  ilog "==> Finding target branch.."
  remote_branches=$(git ls-remote --heads origin)
  for b in "${branches[@]}"; do
    if echo -e "$remote_branches" | grep -q "refs/heads/$b"; then
      echo "origin/$b"
      return
    fi
  done
}

cat_issue() {
  cat <<EOF

## 関連Issue

$(echo "$issues" | tr ',' '\n' | sed -e 's/^/- #/')

EOF
}

cat_commit_list() {
  cat <<EOF

## コミット一覧

$(sed -e 's/^/- /' "$target_tmp_dir"/commit_list)

EOF
}

clear_tmp_dir() {
  ilog "==> Cleaning $target_tmp_dir.."
  rm -rf "$target_tmp_dir"
  mkdir -p "$target_tmp_dir"
}

create_diff() {
  ilog "==> Creating diff.."
  git_diff_ignored "$target_branch"...HEAD >"$target_tmp_dir"/diff
}

create_commit_list() {
  ilog "==> Creating commit_list.."
  git log --oneline "$target_branch"...HEAD >"$target_tmp_dir"/commit_list
}

create_pr_parts() {
  clear_tmp_dir
  if [[ -n $title && -n $body ]]; then
    echo "$title" >"$target_tmp_dir"/title
    echo "$body" >"$target_tmp_dir"/body
    return
  fi

  create_diff
  create_commit_list

  if [[ ! -s $target_tmp_dir/diff ]]; then
    wlog "No changes"
    exit 0
  fi

  ilog "==> Creating messages.json.."
  cat <"$target_tmp_dir"/diff |
    # head -200 |
    prp -ne gen-git-pr-message.md$ >"$target_tmp_dir"/prompt.md
  cat <"$target_tmp_dir"/prompt.md |
    llm >"$target_tmp_dir"/messages.json

  ilog "==> Creating title/body.."
  jq -r '.title' "$target_tmp_dir"/messages.json >/dev/null 2>&1 || {
    cat <"$target_tmp_dir"/messages.json |
      sed -e '/^```/d' -e '/```json/d' -e '/^$/d' >"$target_tmp_dir"/messages.json.bk
    mv "$target_tmp_dir"/messages.json.bk "$target_tmp_dir"/messages.json
  }
  jq -r '.title' "$target_tmp_dir"/messages.json >"$target_tmp_dir"/title
  jq -r '.body' "$target_tmp_dir"/messages.json >"$target_tmp_dir"/body
  if [[ -n $issues ]]; then
    cat_issue >>"$target_tmp_dir"/body
  fi
  cat_commit_list >>"$target_tmp_dir"/body
}

create_compact_pr_parts() {
  clear_tmp_dir
  echo "Merge $current_branch to $target_branch" >"$target_tmp_dir"/title
  create_commit_list
  cat_commit_list >"$target_tmp_dir"/body
}

create_pr_with_push() {
  ilog "==> Pushing commits.."
  git push -u origin "$current_branch"
  _target_branch=${target_branch#origin/}
  is_origin_is_gitlab && {
    dump_pr_or_mr MR
    create_mr
    return
  }
  dump_pr_or_mr PR
  create_pr
}

is_origin_is_gitlab() { git remote get-url origin 2>/dev/null | grep -q gitlab; }
dump_pr_or_mr() {
  ilog "==> Creating $1!.."
  # shellcheck disable=SC2016
  cat <<EOF | ink yellow
branch: $current_branch ==> $_target_branch
 title: $(cat <"$target_tmp_dir"/title)
  body:
$(cat <"$target_tmp_dir"/body | sed 's/"/\\"/g; s/`/\\`/g')
EOF
}

create_pr() {
  cat <"$target_tmp_dir"/body |
    gh pr create \
      --base "$_target_branch" \
      --head "$current_branch" \
      --web \
      --title "$(cat <"$target_tmp_dir"/title)" \
      --body-file -
}

create_mr() {
  glab mr create \
    --target-branch "$_target_branch" \
    --source-branch "$current_branch" \
    --web \
    --title "$(cat <"$target_tmp_dir"/title)" \
    --description "$(cat <"$target_tmp_dir"/body)"
}

end() {
  ilog "==> Done!"
}

main() {
  initialize "$@"

  if [[ -z $target_branch ]]; then
    target_branch=$(find_target_branch_with_fetch)
    if [[ -z $target_branch ]]; then
      elog "==> No target branch found."
    fi
  fi
  ilog "==> Target branch: $target_branch"

  if [[ $compact -eq 1 ]]; then
    target_tmp_dir=/tmp/pr
    create_compact_pr_parts
  fi

  if [[ -z $target_tmp_dir ]]; then
    target_tmp_dir=/tmp/pr
    create_pr_parts
  fi
  create_pr_with_push
}
main "$@"
