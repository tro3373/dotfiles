#!/usr/bin/env -S bash -e

command_name=$(basename "$0") && readonly command_name
current_dir=$(pwd) && readonly current_dir
readonly depends=(git fzf)
mode=add
branch=
args=()
usage() {
  cat <<EOF

Add a new git worktree for the specified branch(or Remove it).

  Usage:
      $command_name [option] <branch_name>
    Options
      -h|--help : Show this usage
      -r        : Remove the worktree instead of adding it

EOF
}
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -r) mode=remove ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  check
}
check() {
  hass "${depends[@]}"

  if [[ ! -d .git ]]; then
    elog "==> Not a git repository or main git repository. Please run this command in a git repository."
  fi

  branch="${args[*]}"
  if [[ $mode == "add" && -z $branch ]]; then
    cat <<EOF | elog
==> Specify a branch name to add a worktree for.
==> Exiting branch is..

$(git branch -vv)

EOF
  fi
}
add_args() { args+=("$@"); }
has() { command -v "${1}" >&/dev/null; }
hass() { for arg in "$@"; do has "$arg" || elog "==> No $arg command exist."; done; }

get_worktree_branch_name() {
  # Replace slashes with hyphens for the branch name
  echo "${branch//\//-}"
}

add_worktree() {
  git_root_dir=$(get_git_root)
  cd "$git_root_dir" || {
    elog "Failed to change directory to git root: $git_root_dir"
  }
  dst_dir="$git_root_dir/.git/$command_name/$(get_worktree_branch_name)"
  ilog "==> Adding worktree to $dst_dir for $branch branch.."
  git worktree add -b "$branch" "$dst_dir" || {
    elog "Failed to add worktree to $dst_dir for branch '$branch'."
  }
  ln_envs_zip_entry_if_needed
  ilog "==> Added worktree for branch '$branch' at '$dst_dir'."
  echo "$dst_dir"
}

ln_envs_zip_entry_if_needed() {
  local envs_zip_file="$git_root_dir/envs.zip"
  [[ ! -e $envs_zip_file ]] && return
  zipinfo -1 "$envs_zip_file" |
    while read -r line; do
      [[ -z $line ]] && continue
      [[ $line =~ ^#.* ]] && continue
      ilog "==> Linking $line from envs.zip to $dst_dir"
      ln -s "$line" "$dst_dir/$line"
    done
}

remove_worktree() {
  if [[ -z $branch ]]; then
    removal_list=$(git worktree list | grep -v "^$current_dir " || :)
    if [[ -z $removal_list ]]; then
      elog "No worktrees exist to remove."
    fi
    branch=$(
      echo -e "$removal_list" |
        fzf --height=20% --reverse --no-multi --no-color --prompt="Select branch to remove worktree for: " |
        awk '{print $1}'
    )
    if [[ -z $branch ]]; then
      elog "No branch selected. Exiting."
    fi
  fi
  ilog "==> Removing worktree for branch '$branch'."
  git worktree remove "$branch"
  ilog "==> Worktree for branch '$branch' removed. Current worktrees:"
  git worktree list
}

main() {
  initialize "$@"

  if [[ $mode == "remove" ]]; then
    remove_worktree
    return
  fi
  add_worktree
}
main "$@"
