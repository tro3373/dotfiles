#!/usr/bin/env bash

command_name=$(basename "$0") && readonly command_name
current_dir=$(pwd) && readonly current_dir
error_log=$current_dir/$command_name.error.log && readonly error_log
confs=("$0.conf" "$HOME/.$command_name")
cnf=

dry=0
mode=
src=
dst=

# MEMO: rsync can --include=PATTERN
# excludes=("node_modules" "bower_components" ".tmp")
excludes=()
readonly depends=(git rsync)
args=()
cmds=()

usage() {
  cat <<EOF

Rsync easily.

Usage:
  $command_name <push|pull> [option] [Additional rsync options]

Options
           -h : Show this usage
           -d : dry-run
  -ex pattern : exclude pattern

$command_name.conf
  ex)
    /path/to/repository remote:/path/to/sync/directory exclude exclude ..
       |                  |      |                      |- Exclude patterns
       |                  |      |- remote sync root path
       |                  |- Remote name defined in ~/.ssh/config
       |- Local target sync directory

EOF
}

# shellcheck disable=SC2145
_log() { echo "$(date +"%Y-%m-%d %H:%M:%S") ${@:2}" | ink "$1"; }
log() { _log cyan "$*"; }
error() { _log red "$*" && exit 1; }
has() { command -v "${1}" >&/dev/null; }
hass() {
  for arg in "$@"; do
    has "$arg" && continue
    error "==> No $arg command exist."
  done
}
add_args() { args+=("$@"); }
add_cmds() { cmds+=("$@"); }
add_excludes() { excludes+=("$@"); }
get_src_root() { git rev-parse --show-toplevel; }
check_cnf() {
  [[ -n $cnf && -e $cnf ]] && return
  usage
  error "==> No $cnf file exist."
}

initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -d) dry=1 ;;
      -ex) shift && add_excludes "$1" ;;
      push) mode=push ;;
      pull) mode=pull ;;
      *) add_args "$1" ;;
    esac
    shift
  done

  hass "${depends[@]}"
  cnf=$(find_first_cnf)
  check_cnf

  src=$(get_src_root)
  if [[ -z $src || ! -e $src ]]; then
    error "==> You Not in git repository. $(pwd)"
  fi
  if [[ -z $mode ]]; then
    error "==> Specify push or pull."
  fi

  read -r _ dst _excludes < <(cat <"$cnf" | grep -E "^${src}[ 	]" | head -1)
  [[ -z $dst ]] && error "No dst path defined for $src in $cnf"
  [[ -n $_excludes ]] &&
    for _exclude in $_excludes; do
      add_excludes "$_exclude"
    done
  [[ $mode == "pull" ]] && local _tmp=$src && src=$dst && dst=$_tmp
  set -eo pipefail
}

find_first_cnf() {
  for conf in "${confs[@]}"; do
    [[ -e $conf ]] && echo "$conf" && break
  done
}

_rsync() {
  # -a: -rlptgoD --no-H --no-A --no-X
  # -v: --verbose         動作内容を表示する
  # -q: --quiet           動作中のメッセージを抑制する
  # -n: --dry-run         試験モード。実際には動作せず、動作内容だけ表示する（「-v」や「--stats」を一緒に指定する）
  #     --stats           ファイル数や転送サイズを表示する
  #     --list-only       コピーする代わりにファイルのリストを作成する
  # -I  --ignore-times    サイズとタイムスタンプが同じファイルも処理する
  #     --size-only       サイズが同じファイルは処理しない
  # -c: --checksum        更新日とサイズではなく、チェックサムで変更の有無をチェックする
  #     --daemon          デーモンとして動作（「--daemon --help」でデーモン時に使用できるオプションが確認できる）
  # -r: --recursive       ディレクトリを再帰的に処理する
  # -l: --links           シンボリックリンクをシンボリックリンクのままコピーする
  # -p: --perms           パーミッションを保持する
  # -t: --times           タイムスタンプを保持する
  # -g: --group           所有グループをそのまま保持する
  # -o: --owner           所有者をそのまま保持する（自分以外の所有者を保持するにはroot権限が必要）
  # -D:                   デバイスファイルや特殊ファイルを保持する（「--devices --specials」相当）
  #     --devices         デバイスファイルを保持する（root権限が必要）
  #     --specials        特殊ファイルを保持する
  # -z: --compress        転送中のデータを圧縮する
  # -u: --update          同期先のファイルの方が新しい場合はスキップする
  # if has sudo; then
  #   add_cmds "sudo"
  # fi
  add_cmds "rsync" "-rtzzv" "--no-H" "--no-A" "--no-X" "--delete"
  if [[ $dry -ne 0 ]]; then
    add_cmds "-n"
  fi
  # if [[ $mode == "pull" ]]; then
  #   add_cmds '--rsync-path="sudo rsync"' # remote rsync path
  # fi
  for _ex in "${excludes[@]}"; do
    add_cmds "--exclude" "\"$_ex\""
  done
  # # '-e ssh' is not needed if you have ~/.ssh/config
  # add_cmds "-e" "ssh -F $HOME/.ssh/config"
  # MEMO:
  # /あり: src/配下のファイルをdst/にコピー
  # /なし: srcをコピー(src/配下のファイルをdst/src/にコピー)
  add_cmds "$src/" "$dst/"

  tmpf=$(mktemp)
  # 0 プロセス終了時に、プロセスが自分自身に対して送出する EXIT シグナル。
  # 1 XWindow のクローズや、デーモンのリセットに使用されるハングアップシグナル。
  # 2 Ctrl+C や Del キーを押したときに発生する割り込みシグナル。
  # 3 Ctrl+\ を押したときに発生するクイットシグナル。
  # 9 プロセスを強制終了するためのキルシグナル。強制終了なので当然、trap はできない。
  #15 プロセスを終了させるための終了シグナル。kill コマンドはデフォルトでこのシグナルを使用する (つまり kill PID は kill -15 PID と同じ結果になる)。
  trap 'rm -rf $tmpf' 0 1 2 3 15

  log "==> Excuting: ${cmds[*]}"
  # "${cmds[@]}" 2>(tee "$tmpf" >&2) || :
  "${cmds[@]}" 2>"$tmpf" || :
  # tmpf に何か書き込まれていたらカレントに移動
  if [[ ! -s $tmpf ]]; then
    return
  fi
  # only error to error_log
  mv "$tmpf" "$error_log"
  cat <<EOF | ink yellow
==> Below error exist. See $error_log

$(cat "$error_log")
EOF
  exit 1
}

main() {
  initialize "$@"
  _rsync
}
main "$@"
