#!/usr/bin/env bash

# @see https://qiita.com/moutend/items/5c22d6e57a74845578f6
command_name=$(basename "$0") && readonly command_name
readonly conf_path=$0.conf

mode=
gen_pub_pri_keys=0

name=
email=
pass=
args=()

usage() {
  cat <<EOF

Generate gpg keys via gen config

Usage:
  $command_name [option]
Options
  -h : Show this usage
  -g <passphrase> : Gen config
  -p : Gen public and private keys

EOF
}

has() { command -v "${1}" >&/dev/null; }
_ink() { cat - | if has ink; then ink "$@"; else cat -; fi; }
# shellcheck disable=SC2145
_log() { echo "$(date +"%Y-%m-%d %H:%M:%S") ${@:2}" | _ink "$1"; }
log() { _log cyan "$*"; }
error() { _log red "$*" && exit 1; }
add_args() { args+=("$@"); }
get_git_global_value() { git config --global --get "$1"; }

initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -p) gen_pub_pri_keys=1 ;;
      -g | --gen)
        mode=gen_config
        shift
        [[ $1 == -* ]] && continue
        pass=$1
        ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  load_from_git_config
  check
}

load_from_git_config() {
  name=$(get_git_global_value user.name)
  email=$(get_git_global_value user.email)
}

check() {
  if [[ -z $name || -z $email ]]; then
    error "==> Setup git config global. user.name,user.email."
  fi
}

cat_conf() {
  cat <<EOF
# Unattended GPG key generation - Using the GNU Privacy Guard
# https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html
Key-Type: RSA
Key-Length: 4096
Subkey-Type: RSA
Subkey-Length: 4096
# 2 years
Expire-Date: 2y

Name-Real: $name
Name-Email: $email
Passphrase: $pass

# create kyes abouve settings
%commit
%echo Successfully done
EOF
}

gen_conf() {
  if [[ -e $conf_path ]]; then
    log "==> Already setupped $conf_path"
    return
  fi
  if [[ -z $pass ]]; then
    log "==> Imput passphrase:"
    read -r -s pass
    if [[ -z $pass ]]; then
      error "==> Error empty passphrase."
    fi
  fi
  cat_conf >"$conf_path"
  log "==> gpg config generated."
}

gen() {
  if gpg -k | grep "$name" >&/dev/null; then
    log "==> Already gpg key $name exist."
    gpg -k
  else
    log "==> Generating gpg key via $conf_path.."
    gpg --gen-key --batch "$conf_path"
  fi
}

gen_pub_pri_keys() {
  gpg -o ./"$name.public.gpg" --export "$name"
  gpg -o ./"$name.private.gpg" --export-secret-key "$name"
  cat <./"$name.public.gpg" | base64 | tr -d '\n' >./"$name.public.gpg.base64"
}

main() {
  initialize "$@"
  if [[ $mode == gen_config || ! -e $conf_path ]]; then
    log "==> Generating gpg config.. $conf_path"
    gen_conf
    if [[ $mode == gen_config ]]; then
      return
    fi
  fi
  gen
  [[ $gen_pub_pri_keys == 0 ]] && return
  gen_pub_pri_keys
}
main "$@"
