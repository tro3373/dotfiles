#!/bin/bash

current_dir=$(pwd)
script_dir=$(cd $(dirname $0); pwd)
command_name=$(basename $0)

usage() {
    cat <<EOF
Generate ssh sample config for ~/.ssh/config.
  Usage:
      $command_name [option]
    Options
            No args : Show config sample.
          -h|--help : Show this usage
      -g|--generate : Generate template config file to ~/.ssh/config or current directory($current_dir) (error if exists.)

EOF
}

set_args() {
    for arg in "$@"; do
        case "$arg" in
            -h|--help)
                usage
                exit 0
                ;;
            -g|--generate)
                gen_file=1
                ;;
            *)
                echo "No option for $arg" 1>&2
                ;;
        esac
    done
}

initialize() {
    set_args "$@"
}

cat_template() {
    cat <<EOL
Host [server1] [server2]
  IdentityFile /path/to/your/identity/file
  ServerAliveInterval 30
  PermitLocalCommand  yes
  LocalCommand tmux rename-window %n
  ForwardX11 yes
  ForwardX11Trusted yes
  RemoteForward 52224 localhost:52224
Host [server1]
  HostName [server1 ip]
  Port 22
  User [username]
Host [server2]
  HostName [server2 ip]
  Port 22
  User [username]
  ProxyCommand ssh -W  %h:%p server1
EOL
}

permission=640
advice() {
    cat <<EOL2

  ==> Finaly...
    Change the config permission to $permission.
        ex) chmod $permission <the target config>
EOL2
}

gen_config() {
    local target="$1"
    if [[ -e $target ]]; then
        echo "===> Already exists config file in $target." 1>&2
        return 1
    fi
    cat_template > $target && chmod $permission $target
    echo "===> Config file generated in $target."
    return 0
}

main() {
    initialize "$@"
    [[ $gen_file -ne 1 ]] && usage && cat_template && advice && exit 0
    (gen_config ~/.ssh/config || gen_config $current_dir/config) || echo "==> No generate space exists!"
}
main "$@"
