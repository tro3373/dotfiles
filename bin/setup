#!/usr/bin/env bash

command_name=$(basename "$0") && readonly command_name
script_dir=$(cd "$(dirname "${BASH_SOURCE:-$0}")" && pwd) && readonly script_dir
apps_dir=$(cd "$script_dir/../apps" && pwd) && readonly apps_dir

usage() {
  cat <<EOF
Setup my dev env.
  Usage:
      $command_name [Option] [App App...]
    Options
      -h|--help
        Show this usage
      -d|--debug
        whith debug option
      -e|--exec
        execute install/setup process.
      -f|--force
        install process will be executed forcibly if already installed, and also setup process will be executed.
      -a|--additional
        enable additional setup
      -m|--minimal
        enable minimal setup
      -v|--view
        vim edit apps config

Installable Apps is ..
$(installable_apps | usage_format)
Default Apps is..
$(for arg in $(default_apps); do echo "$arg"; done | usage_format)
Trans Setup is..
$(find_trans -l | usage_format)
EOF
}

installable_apps() {
  find "$apps_dir"/ -maxdepth 1 -mindepth 1 -type d -exec basename {} \;
}

usage_format() {
  local _start=1
  local _line=
  cat - |
    while read -r _app_name; do
      local _space=" "
      [[ $_start -eq 1 ]] && _space="  " && _start=0
      printf "%s%s" "$_space" "$_app_name"
      _line="$_line$_space$_app_name"
      _n=$(echo -n "$_line" | wc -c)
      [[ $_n -lt 100 ]] && continue
      printf '\n' && _line= && _start=1
    done
}

initialize() {
  # shellcheck disable=SC1091
  source "$script_dir/lib/setup/funcs" "" "$USER"
  initialize_args "$@"

  tran_srouce=$(find_trans "${args[@]}")
  if [[ -n $tran_srouce ]]; then
    ilog "=> tran settings"
    tran=1
    # shellcheck disable=SC1090
    source "$tran_srouce"
    load_update_arg_apps
  fi

  if [[ ${#args[@]} -eq 0 ]]; then
    # args+=("$(default_apps)")
    # shellcheck disable=SC2162
    read -a args < <(default_apps)
  fi

  all_args="${args[*]}"

  handle_view_if_needed

  if is_mac; then
    if ! has brew && ! echo "$all_args" | grep brew >&/dev/null; then
      args=(brew "${args[@]}")
    fi
  fi
}

handle_view_if_needed() {
  # shellcheck disable=SC2154
  if [[ $view -ne 1 ]]; then
    return
  fi
  local filter_keys=
  if [[ ${#args[@]} -ne 0 ]]; then
    filter_keys="($(echo -n "${args[@]}" | tr ' ' '|'))"
  fi

  installable_apps |
    if [[ -z $filter_keys ]]; then
      cat -
    else
      cat - | grep -E "$filter_keys"
    fi | xargs -n 1 -I{} echo "$apps_dir"/{}/config | v
  exit 0
}

make_setup_dirs() {
  local works_home=$HOME
  if is_msys || is_wsl; then
    if [ -z "$WINHOME" ]; then
      is_msys && WINHOME="$(cd "/c/Users/$(whoami)" && pwd)"
      # is_wsl && WINHOME=/mnt/c/Users/$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | sed -e 's,\r,,g')
      if is_wsl; then
        local _u
        _u=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
        WINHOME=$(echo /mnt/c/Users/"$_u" | tr -d '\r' | tr -d '\n')
      fi
    fi
    works_home=$WINHOME
  fi
  make_dir_if_needed "$works_home/bin"
  make_dir_if_needed "$works_home/tools"
  make_dir_if_needed "$works_home/works/00_memos"
  if ! is_msys && ! is_wsl; then
    return
  fi
  make_lnk_with_bkup "$WINHOME" "$HOME"/win
  # make_lnk_with_bkup $WINHOME/bin $HOME/bin
  make_lnk_with_bkup "$WINHOME"/tools "$HOME"/tools
  make_lnk_with_bkup "$WINHOME"/works "$HOME"/works
  make_lnk_with_bkup "$WINHOME"/Downloads "$HOME"/Downloads
}

# suggest_install_brew() {
#   cat <<'EOF'
# ================================================
#  HomeBrew is Not Installed!
#   => You need to install brew first.
#     echo "export PATH=/usr/local/bin:\$PATH" >> ~/.bash_profile
#     sudo mkdir /usr/local/
#     /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#     source ~/.bash_profile
#     brew update
#     brew -v
#
# EOF
# }
#
debug_options() {
  dlog "===================================================="
  dlog " Execute with below args."
  dlog "   ===> Apps: $all_args"
  # shellcheck disable=SC2154
  dlog "   ===> force: $force"
  # shellcheck disable=SC2154
  dlog "   ===> dry_run: $dry_run"
  dlog "   ===> view: $view"
  dlog "===================================================="
}

install_app() {
  default_called=0
  is_wsl && install_wsl && return
  is_arch && install_arch && return
  is_msys && install_msys && return
  is_cygwin && install_cygwin && return
  is_mac && install_mac && return
  is_ubuntu && install_ubuntu && return
  is_redhat && install_redhat && return
  if [[ $default_called -eq 1 ]]; then
    install_common
  fi
}

setting_app() {
  default_called=0
  is_wsl && setting_wsl && return
  is_arch && setting_arch && return
  is_msys && setting_msys && return
  is_cygwin && setting_cygwin && return
  is_mac && setting_mac && return
  is_ubuntu && setting_ubuntu && return
  is_redhat && setting_redhat && return
  if [[ $default_called -eq 1 ]]; then
    setting_common
  fi
}

not_supported() {
  # shellcheck disable=SC2317
  local _message="==> No setting exist."
  # shellcheck disable=SC2317
  if [[ $for_setting -ne 1 ]]; then
    _message="==> Not supported."
    not_supported=1
  fi
  # shellcheck disable=SC2317
  log "$_message"
}

setup_for_app() {
  dlog "================================================"
  ilog "=> $app"

  not_supported=0
  if [[ $force -eq 1 ]] || ! is_installed; then
    for_setting=0
    install_app
  fi
  if [[ $not_supported -ne 1 ]]; then
    if is_dry || is_installed; then
      for_setting=1
      setting_app
    fi
  fi
}

main_setup() {
  make_setup_dirs
  setup_args "${args[@]}"
  if [[ ${#dependency_args} -eq 0 ]]; then
    return
  fi
  log "> Start setup depencency apps.."
  # shellcheck disable=SC2154
  setup_args "${dependency_args[@]}"
}

setup_args() {
  # ディレクトリ名＝アプリ名の前提
  for app in "$@"; do
    app_dir=$apps_dir/$app
    if [[ ! -e $app_dir ]]; then
      log "=> No such app $app"
      continue
    fi
    # shellcheck disable=SC1091
    source "$script_dir"/lib/setup/default
    local script_path=$app_dir/config
    if [[ -e $script_path ]]; then
      # shellcheck disable=SC1090
      source "$script_path"
    fi
    setup_for_app
  done
}

start_setup() {
  set -e
  cd "$DOT_PATH"
  if [[ $tran -eq 1 ]]; then
    ilog "> Prev Setup"
    pre_setup
  fi
  ilog "> Main Setup"
  main_setup
  if [[ $tran -eq 1 ]]; then
    ilog "> Post Setup"
    post_setup
  fi
}

main() {
  initialize "$@"
  debug_options
  start_setup
  show_dummy_warn_if_needed
  ink green "Done!"
  echo
}
main "$@"
