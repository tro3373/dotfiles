#!/usr/bin/env bash

readonly current_dir=$(pwd)
dst_root=$current_dir/downloaded_functions
ls_functions() {
  aws lambda list-functions --query 'Functions[].FunctionName' |
    tr -d '"' |
    tr -d ',' |
    tr -d '[' |
    tr -d ']' |
    tr -d '	' |
    tr -d ' ' |
    sed -e '/^$/d' |
    sort -u
}
get_urls() {
  while read -r fname; do
    [[ -z $fname ]] && continue
    [[ $fname =~ ^#.* ]] && continue
    # [[ ! -e $fname ]] && mkdir -p $fname
    printf "=> For $fname Lambda Function: Getting urls .. " 1>&2
    local url=$(aws lambda get-function --function-name $fname --query 'Code.Location')
    [[ -z $url ]] && echo "=> Abort" 1>&2 && exit 1
    printf "✔\n" 1>&2
    echo "$fname $url"
  done
}
get_zips() {
  while read -r fname url; do
    [[ -z $fname ]] && continue
    [[ $fname =~ ^#.* ]] && continue
    url=$(echo -e $url |tr -d '"')
    local dstd=$dst_root/$fname
    [[ ! -e $dstd ]] && mkdir -p $dstd
    printf "==> Downloading $fname .. " 1>&2
    curl -fSsL -o $dstd/$fname.zip $url #|| echo "==> Failed to download $fname." 1>&2 && continue
    printf "✔\n" 1>&2
    printf "==> Unzipping $fname .. " 1>&2
    unzip -q -d $dstd $dstd/$fname.zip
    printf "✔\n" 1>&2
    printf "==> Deleting $dstd/$fname.zip .. " 1>&2
    rm $dstd/$fname.zip
    printf "✔\n" 1>&2

    local node_modules=$dstd/node_modules
    [[ ! -e $node_modules ]] && continue
    printf "==> Deleting $node_modules .. " 1>&2
    rm -rf $node_modules
    printf "✔\n" 1>&2
  done
}
main() {
  # if [[ $# -eq 0 ]]; then
  #   ls_functions
  # else
  #   echo "$@"
  local d="$(basename "$current_dir")"
  ls_functions |fzf -q "$d" -m | get_urls | get_zips
}
main "$@"

