#!/usr/bin/env bash

command_name=$(basename "$0") && readonly command_name
readonly port_mysql=3306

# profile=
remote=
ec2_id=
key=
region=ap-northeast-1
db_host=

local_ssh_port=2222
pid_443=
pid_80=

args=()
usage() {
  cat <<EOF

Tunnel mysql port forwarding Using AWS System Manager Session Manager

Usage:
  $command_name [option]
Options
  -h|--help               : Show this usage
  # -p|--profile <profile>  : AWS profile
  --region <region>       : Specify region. default is ap-northeast-1
  -i|--id <ec2_id>        : EC2 id to connect to.
  -k|--key <ssh_key>      : Specify ssh key.
  -d|--db <db_host>       : Database Host/Proxy name.

EOF
}
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      # -p | --profile) shift && profile=$1 ;;
      -r | --remote) shift && remote=$1 ;;
      -i | --id) shift && ec2_id=$1 ;;
      -k | --key) shift && key=$1 ;;
      --region) shift && region=$1 ;;
      -d | --db) shift && db_host=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  check
}

check() {
  if ! has aws; then
    log "No aws command exist."
    exit 1
  fi
  if ! has session-manager-plugin; then
    log "No session-manager-plugin command exist."
    exit 1
  fi
  if [[ -z $ec2_id ]]; then
    usage
    log "Specify ec2_id"
    exit 1
  fi
  if [[ ! -e $key ]]; then
    usage
    log "Specify exist key. key=$key"
    exit 1
  fi
  if [[ -z $db_host ]]; then
    usage
    log "Specify db_host"
    exit 1
  fi
  # shellcheck disable=SC2154
  if is_port_useing $local_ssh_port; then
    log "Aready $local_ssh_port used."
    exit 1
  fi
}

add_args() { args+=("$@"); }
has() { command -v "${1}" >&/dev/null; }
ink() {
  local stdin=
  if [[ -p /dev/stdin ]]; then
    stdin="$(cat <&0)"
  fi
  if [[ $# -eq 0 && -z $stdin ]]; then
    return
  fi

  local open="\033["
  local close="${open}0m"
  export black="0;30m"
  export red="1;31m"
  export green="1;32m"
  export yellow="1;33m"
  export blue="1;34m"
  export purple="1;35m"
  export cyan="1;36m"
  export gray="0;37m"
  export white="$close"

  local text="$stdin$*"
  local color="$close"

  case $1 in
    black | red | green | yellow | blue | purple | cyan | gray | white)
      eval color="\$$1"
      # text="$stdin${*:2}"
      text=$(echo -e "$stdin${*:2}" | sed -e 's,%,%%,g')
      ;;
  esac

  # shellcheck disable=SC2059
  printf "${open}${color}${text}${close}\n" 1>&2
}
log() { echo "$(date +"%Y-%m-%d %H:%M:%S") $*" | ink yellow; }
is_port_useing() { netstat -ano | grep LISTEN | grep ":$1" >&/dev/null; }

wait_until_port_used() {
  while true; do
    is_port_useing "$1" && break
    # log "=> Waiting 2s for forwarding port $1.."
    sleep 2
  done
}

end() {
  if [[ -n $pid_443 ]]; then
    kill "$pid_443" 2>/dev/null && log "==> Killed PID($pid_443) use port 443.."
  fi
  if [[ -n $pid_80 ]]; then
    kill "$pid_80" 2>/dev/null && log "==> Killed PID($pid_80) use port 80.."
  fi
}

wait_and_tunnel_db() {
  local _port=$1
  wait_until_port_used $local_ssh_port
  tunnel_db "$_port" "$_port"
}

tunnel_db() {
  local r_port=$1
  local l_port=$2
  # shellcheck disable=SC2154
  log
  log "==> PortForwarding $db_host:$r_port to localhost:$l_port via $remote.. Press Ctrl+C to exit"
  log
  # shellcheck disable=SC2154
  ssh -g -N -L "$l_port":"$db_host":"$r_port" ssm-user@"$remote" -p 2222 -i "$key" -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -oServerAliveInterval=30
}

start_ssm_session() {
  log "==> Wating start ssm session..."
  # --profile $profile \
  aws \
    --region "$region" \
    ssm start-session \
    --target "$ec2_id" \
    --document-name AWS-StartPortForwardingSession \
    --parameters "{\"portNumber\":[\"22\"],\"localPortNumber\":[\"$local_ssh_port\"]}"
}

main() {
  initialize "$@"
  wait_and_tunnel_db $port_mysql &
  start_ssm_session
  wait
}
main "$@"
