#!/usr/bin/env bash

command_name=$(basename "$0") && readonly command_name
dummy="echo"
args=()

usage() {
  cat <<EOF

Update and Upgrade system packages.

Usage:
  $command_name [option]
Options
  -h|--help : Show this usage

EOF
}

log() { echo "$(date +"%Y-%m-%d %H:%M:%S") $*" | ink cyan; }
has() { command -v "${1}" >&/dev/null; }
add_args() { args+=("$@"); }

check() {
  :
}

initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -e) dummy= ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  check
}

not_supported() { echo "Not supported." 1>&2 && exit 1; }
update_arch() {
  log "=> Cleaning.."
  clear_pkg_cache
  local _cmd="sudo pacman"
  if has yay; then
    local _cmd=yay
  fi
  log "=> Updating.."
  # shellcheck disable=SC2086
  $dummy $_cmd -Syyu --noconfirm "${args[@]}"
}
update_ubuntu() {
  log "=> Updating.."
  $dummy sudo apt-get -y update "${args[@]}"
  log "=> Upgrading.."
  $dummy sudo apt-get upgrade -y
  log "=> Dist Upgrading.."
  $dummy sudo apt-get dist-upgrade -y
}
fix_scoop_for_wsl() {
  $dummy sed -i -e 's,\r,,g' "$(which scoop)"
}
update_scoop() {
  log "=> Updating.."
  $dummy scoop update || fix_scoop_for_wsl
  log "=> Cleaning.."
  $dummy scoop cache rm '*'
  $dummy scoop cache show
  $dummy scoop cleanup '*'
  local list="${args[*]}"
  if [[ -z $list ]]; then
    list=$(
      scoop list |
        tr '\r' ' ' |
        tail -n +5 |
        awk '{print $1}' |
        grep -v -E '(vagrant|msys2|virtualbox)' |
        while read -r line; do
          [[ -z $line ]] && continue
          echo "$line"
        done |
        tr '\n' ' '
    )
  fi
  log "=> Updating pkgs.. ($list)"
  $dummy scoop update "$list" || fix_scoop_for_wsl
}
update_msys() {
  update_scoop
}
update_mac() {
  log "=> Cleaning.."
  $dummy brew cleanup
  # $dummy brew cask cleanup --outdated
  log "=> Updating.."
  # no needed. brew upgrade execute brew update too
  # $dummy brew update
  $dummy brew upgrade
  log "=> Checking.."
  $dummy brew doctor
}
update_rust() {
  log "=> Updating rustup.."
  $dummy rustup update stable
}
main() {
  initialize "$@"
  set -e
  local _os
  _os=$(os)
  case "$_os" in
    arch) update_arch ;;
    ubuntu) update_ubuntu ;;
    msys) update_msys ;;
    mac) update_mac ;;
    *) not_supported ;;
  esac
  if os wsl; then
    update_scoop
  fi
  update_rust
  log "Done!"
}
main "$@"
