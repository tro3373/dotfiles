#!/usr/bin/env bash

current_dir=$(pwd) && readonly current_dir
command_name=$(basename "$0") && readonly command_name
readonly depends=(awslogs)

timestamp=$(date +%Y%m%d.%H%M%S) && readonly timestamp
default_key="requestId" && readonly default_key
default_key_for_lambda="START RequestId:" && readonly default_key_for_lambda
profile=
region=ap-northeast-1
groups=()
keys=()
key=
sta=
end=
dstd=

usage() {
  cat <<EOF

Dump cloud watch logs
  Usage:
      $command_name [option] <key word>
    Options
      -h|--help : Show this usage
      -p        : Specify profile
      -r        : Specify region
      -s        : Specify Start time JST (yyyy/MM/dd HH:mm)
      -e        : Specify End time JST (yyyy/MM/dd HH:mm)
      -g        : Specify cloud watch log group
      -d|--dest : Specify destination directory
EOF
}
initialize() {
  hass "${depends[@]}"
  if [[ $# -eq 0 ]]; then
    usage && exit 1
  fi

  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -p) shift && profile="$1" ;;
      -r) shift && region="$1" ;;
      -s) shift && sta="$1" ;;
      -e) shift && end="$1" ;;
      -d | --dest) shift && dstd="$1" ;;
      -g) shift && add_groups "$1" ;;
      *) add_keys "$1" ;;
    esac
    shift
  done
  key="${keys[*]}"

  if [[ ${#groups[*]} -eq 0 ]]; then
    error "Specify loggroup"
  fi
  sta=$(to_utc "-1 hour" "$sta")
  end=$(to_utc "-0 min" "$end")
  log "==> sta:$sta, end:$end"

  if [[ -z $dstd ]]; then
    dstd="$current_dir/${command_name}_${timestamp}"
  fi
  mkdir -p "$dstd"
}

add_groups() { groups+=("$@"); }
add_keys() { keys+=("$@"); }

has() { command -v "${1}" >&/dev/null; }
hass() { for arg in "$@"; do has "$arg" || error "==> No $arg command exist."; done; }
_ink() { cat - | if has ink; then ink "$@"; else cat -; fi; }
# shellcheck disable=SC2145
_log() { echo "$(date +"%Y-%m-%d %H:%M:%S") ${@:2}" | _ink "$1"; }
log() { _log white "$*"; }
info() { _log cyan "$*"; }
warn() { _log yellow "$*"; }
error() { _log red "$*" && exit 1; }

to_utc() {
  local _def="$1"
  local _val="$2"
  if [[ -z $_val ]]; then
    _val="$(date -d "$_def" "+%Y/%m/%d %H:%M")"
  fi
  TZ=UTC date -d "$_val JST" "+%Y/%m/%d %H:%M"
}

find_logs() {
  f="$*"
  if [[ -n $profile ]]; then
    profile_opt="--profile $profile"
  fi
  # sta/end is GMT
  awslogs get "$group" \
    -s "$sta" \
    -e "$end" \
    -f "\"$f\"" \
    --timestamp \
    --aws-region "$region" "$profile_opt"
}

find_key_logs() {
  log "==> Finding key:'$key' logs.. "
  find_logs "$key"
}

find_req_id_logs() {
  log "==> Finding req_id:$req_id logs.. "
  find_logs "$req_id"
}

find_logs_for_lambda() {
  local req_id_idx=6
  if [[ $key != "$default_key_for_lambda" ]]; then
    # NOTE:
    # 1) key == default_key_for_lambda (SPACE)
    #   ex) /aws/lambda/lambda_name YYYY/MM/DD/[$LATEST]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy-MM-ddTHH:mm:ss.SSSZ START RequestId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx ..
    #       1                       2                                                    3                        4     5          6                                    7
    # 2) key != default_key_for_lambda (TAB)
    #   ex) /aws/lambda/lambda_name YYYY/MM/DD/[$LATEST]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy-MM-ddTHH:mm:ss.SSSZ yyyy-MM-ddTHH:mm:ss.SSSZ	xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx	..
    #       1                       2                                                    3                        4                         5
    req_id_idx=5
  fi
  find_key_logs |
    grep -E "^$group" |
    awk -F"[ \t]" '{print $3 " " $'$req_id_idx'}' |
    sort -u |
    tee "$dstd"/list |
    while read -r ts req_id; do
      [[ -z $ts ]] && continue
      [[ $ts =~ ^#.* ]] && continue
      dstf="$dstd/$ts.$log_name.$req_id.log"
      find_req_id_logs | tee -a "$dstf"
    done
}

main() {
  initialize "$@"

  profile_opt=
  if [[ -n $profile ]]; then
    profile_opt="--profile $profile"
  fi
  for group in "${groups[@]}"; do
    log "==> For Target Group: $group"
    log_name=$(basename "$group")
    if [[ $group =~ ^/aws/lambda/ ]]; then
      log "==> For Lambda"
      if [[ -z $key ]]; then
        key=$default_key_for_lambda
      fi
      find_logs_for_lambda
      continue
    fi
    log "==> For Others"
    if [[ -z $key ]]; then
      key=$default_key
    fi
    dstf="$dstd/$log_name.$timestamp.log"
    find_key_logs | tee -a "$dstf"
  done
  log "Done. see dstd:$dstd"
}
main "$@"
