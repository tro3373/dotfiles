#!/usr/bin/env -S bash -e

command_name=$(basename "$0") && readonly command_name
readonly depends=(gemini-cli tgpt claude gemini)
add_args() { args+=("$@"); }
args=()
cmd=
provider=
model=
key=

usage() {
  cat <<EOF

$command_name - LLM command line interface.
                Execute the instructions from standard input using LLMs.

  Usage:
      $command_name [option]
    Options
      -h|--help     : Show this usage
      -c|--cmd      : Specify the LLM cmd (default: tgpt)
                      Available modes: gemini-cli, tgpt, claude, gemini
      -p|--provider : Specify the provider for tgpt (default: gemini)
      -m|--model    : Specify the model to use
      -k|--key      : Specify the API key for the provider

EOF
}
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      # -e) dummy= ;;
      # -f*|--file*) file=${1#*=} ;;
      --cmd | -c) shift && cmd="$1" ;;
      --provider | -p) shift && provider="$1" ;;
      --model | -m) shift && model="$1" ;;
      --key | -k) shift && key="$1" ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  check
}

check() {
  hass "${depends[@]}"
}

fire() {
  if [[ -p /dev/stdin ]]; then
    cat -
  fi
  if [[ $# -ne 0 ]]; then
    echo "$@"
  fi
}

_tgpt() {
  # ## aandrew-me/tgpt: AI Chatbots in terminal without needing API keys
  # - https://github.com/aandrew-me/tgpt?tab=readme-ov-file
  # ### Provider
  # - deepseek, gemini, groq, isou, koboldai, ollama, openai, pollinations and phind(default)
  # ### Provider Groq
  # - Supported Models - GroqDocs
  #   - https://console.groq.com/docs/models
  # provider=groq model=gemma2-9b-it API_KEY=$GROQ_API_KEY
  # provider=gemini API_KEY=$GEMINI_API_KEY model=gemini-2.5-flash-preview-05-20
  # provider=gemini API_KEY=$GEMINI_API_KEY model=gemini-2.5-flash-lite-preview-06-17
  if [[ -z $provider ]]; then
    provider=gemini
  fi
  if [[ $provider == "gemini" ]]; then
    [[ -z $model ]] && model=$GEMINI_MODEL
    [[ -z $key ]] && key=$GEMINI_API_KEY
  fi
  if [[ $provider == "groq" ]]; then
    # [[ -z $model ]] && model=gemma2-9b-it
    [[ -z $model ]] && model=openai/gpt-oss-120b
    [[ -z $key ]] && key=$GROQ_API_KEY
  fi
  command tgpt --quiet --provider "$provider" --model "$model" --key "$key"
}

_claude() {
  # tmp_org=/tmp/llm-claude-prompt-org.md
  # cat - >$tmp_org
  # command claude -p "$tmp_org の指示を実行して"
  # command claude -p "標準入力からの指示を実行して."
  command claude -p "Execute the instructions from standard input."
}

_gemini() {
  command gemini -y -p ""
}

_eliben_gemini_cli() {
  [[ -z $model ]] && model=$GEMINI_MODEL
  [[ -z $key ]] && key=$GEMINI_API_KEY
  command gemini-cli --model "$model" --key "$key" prompt -
}

_llm() {
  cat - |
    if [[ $cmd == "claude" ]]; then
      _claude
    elif [[ $cmd == "gemini" ]]; then
      _gemini
    elif [[ $cmd == "gemini-cli" ]]; then
      _eliben_gemini_cli
    else
      _tgpt
    fi
}

main() {
  initialize "$@"
  if [[ $# -eq 0 && ! -p /dev/stdin ]]; then
    elog "==> No input data."
  fi
  fire "$@" | _llm
}
main "$@"
