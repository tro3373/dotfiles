#!/usr/bin/env bash

readonly command_name=$(basename $0)
readonly port=5556
readonly direct=0
readonly pidf=/tmp/clipd.pid
daemon=0
readonly log_enable=0
readonly log_enable_content=0
readonly logf=$HOME/clipd.log

usage() {
  cat <<EOF

Copy to os clipboard for wrap different distribution.
Arguments and Normal input will be clipped.

  Usage:
      $command_name [option]
    Options
      -h|--help : Show this usage
      -d        : start daemon
      -k        : kill daemon

EOF
}

logmsg() { echo "$(date +"%Y-%m-%d %H:%M:%S") $*"; }
log() { logmsg "$*" | tee >(if [[ $log_enable -eq 1 ]]; then cat - | tee -a $logf >&/dev/null; fi); }
has() { command -v ${1} >&/dev/null; }
hass() {
  for arg in "$@"; do
    has $arg && continue
    log "No such command $arg exist."
    exit 1
  done
}

check() {
  local use_commands=("nc")
  case "${OSTYPE}" in
    msys*) ;;
    darwin*) use_commands+=("pbcopy") ;;
    *) use_commands+=("xsel") ;;
  esac
  hass "${use_commands[@]}"
  if [[ $daemon -ne 1 && ! -p /dev/stdin ]]; then
    log "No clip target(stdin) exist."
    exit 1
  fi
}

initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -d) daemon=1 ;;
      -k) killd && exit 0 ;;
    esac
    shift
  done
  check
}

direct() { test $direct -eq 1 || test "$(whoami)" == vagrant; }
hasd() { netstat -an | grep $port | grep LISTEN >&/dev/null; }
killd() {
  if ! hasd; then
    log "No kill target exist."
  fi
  _end_clipd
  echo "clipd killed" | _clip
}

_clip() {
  cat - |
    if ! direct && hasd; then
      nc -c localhost $port
    else
      _clippp
    fi
}

_start_clipd() {
  echo $$ >$pidf
  while (true); do
    [[ ! -e $pidf ]] && break
    log "=> Start Waiting clipd.."
    if [[ $OSTYPE =~ darwin* ]]; then
      nc -l $port
    else
      # nc -v -c -l -p $port localhost
      nc -l -p $port localhost
    fi |
      _clippp
  done
}

_end_clipd() {
  if [[ ! -e $pidf ]]; then
    log "=> Ending clipd.."
    return
  fi
  log "=> End Removing $pidf.."
  rm $pidf
}

_clipd() {
  # [[ -e $pidf ]] && log "=> Already clipd pidf exist." && return
  hasd && log "=> Already clipd running." && return
  trap _end_clipd 0 1 2 3 15
  _start_clipd
}

is_wsl() { [[ -n $WSL_DISTRO_NAME ]]; }

_clippp() {
  local _OSTYPE=$OSTYPE
  is_wsl && _OSTYPE=wsl
  local _val="$(cat -)"
  echo -n -e "$_val" |
    case "${_OSTYPE}" in
      wsl) cat - | clip.exe ;;
      msys*) cat - >/dev/clipboard ;;
      darwin*) cat - | pbcopy ;;
      *) cat - | xsel -bi --display ${DISPLAY:-:0} ;;
    esac
  log "==> clipped."
  if [[ $log_enable_content -eq 1 ]]; then
    log "$_val"
  fi
}

main() {
  initialize "$@"
  if [[ $daemon -eq 1 ]]; then
    _clipd
    return
  fi
  _clip "$@"
}
main "$@"
