#!/usr/bin/env bash

readonly command_name=$(basename $0)
readonly current_dir=$(pwd)
readonly timestamp=$(date +%Y%m%d%H%M%S)
args=()
src=
mode=deals
exclude_regexp=
# dummy="echo"

usage() {
  cat <<EOF

Generate freee importable csv

  Usage:
      $command_name [option]
    Options
      -h|--help : Show this usage
      -ex | --excude : Specify exclude regexp
      -t | --template : Gen mode template
      -m | --matcher : Gen mode matcher

EOF
}

add_args() { args+=("$@"); }

check() {
  if [[ -z $src || ! -e $src ]]; then
    echo "Specify valid src file. src=$src" 1>&2
    exit 1
  fi
}
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -ex | --excude) shift && exclude_regexp=$1 ;;
      -t | --template) mode=template ;;
      -m | --matcher) mode=matcher ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
  src=$(find $current_dir/ -maxdepth 1 -mindepth 1 -type f -name "*.csv" |
    fzf --select-1 --exit-0)
  check
}

cat_src() {
  cat <$src |
    nkf -Lu -w -x --cp932 |
    if [[ $1 -eq 1 ]]; then
      cat - | head -1
    else
      cat - |
        tail -n +2 |
        if [[ -n $exclude_regexp ]]; then
          cat - | grep -v -E "$exclude_regexp"
        else
          cat -
        fi
    fi
}

header() {
  cat_src 1 |
    if [[ $mode == deals ]]; then
      # src: 収支区分,管理番号,発生日,決済期日,取引先,勘定科目,税区分,金額,税計算区分,税額,備考,品目,部門,メモタグ（複数指定可、カンマ区切り）,決済日,決済口座,決済金額
      # dst: 収支区分,管理番号,発生日,支払期日,取引先,勘定科目,税区分,金額,税計算区分,税額,備考,品目,部門,メモタグ（複数指定可、カンマ区切り）,支払日,支払口座,支払金額
      cat - | sed -e 's,決済,支払,g'
    else
      # template: 収支区分,グループ名,テンプレート名,ショートカット,口座,取引先,管理番号,勘定科目,税区分,備考,金額,税計算区分,税額,品目,部門,メモタグ
      # matcher: 収支区分,取引口座,取引内容,マッチ条件,金額（最小値）,金額（最大値）,優先度,マッチ後のアクション,振替口座,取引テンプレート,勘定科目,税区分,取引先,品目,部門,メモタグ（複数指定可・カンマ区切り）,セグメント1,セグメント2,セグメント3,備考,消込を実行する際の差額
      cat -
    fi
}

gen_deals_tag() {
  local _org=$1
  local _tag=converted
  if [[ -n $_org ]]; then
    _tag=$_tag,$_org
  fi
  echo "\"$_tag\""
}

handle_deals() {
  while IFS=, read -r c01 c02 c03 c04 c05 c06 c07 c08 c09 c10 c11 c12 c13 c14 c15 c16 c17; do
    # [[ $c08 =~ ^-.* ]] && c10=-$c10
    c16= #登録銀行口座情報削除
    if [[ -n $c17 ]]; then
      c16=事業主借
      [[ $c01 == 収入 ]] && c16=事業主貸
    fi
    c14=$(gen_deals_tag $c14)
    echo "$c01,$c02,$c03,$c04,$c05,$c06,$c07,$c08,$c09,$c10,$c11,$c12,$c13,$c14,$c15,$c16,$c17"
  done
}
handle_template() {
  while IFS=, read -r c01 c02 c03 c04 c05 c06 c07 c08 c09 c10 c11 c12 c13 c14 c15 c16; do
    if [[ -n $c05 && $c05 != 事業主借 ]]; then
      c05=事業主借 #登録銀行口座情報削除
    fi
    echo "$c01,$c02,$c03,$c04,$c05,$c06,$c07,$c08,$c09,$c10,$c11,$c12,$c13,$c14,$c15,$c16"
  done
}
handle_matcher() {
  while IFS=, read -r c01 c02 c03 c04 c05 c06 c07 c08 c09 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21; do
    c02=現金 #登録銀行口座情報削除
    echo "$c01,$c02,$c03,$c04,$c05,$c06,$c07,$c08,$c09,$c10,$c11,$c12,$c13,$c14,$c15,$c16,$c17,$c18,$c19,$c20,$c21"
  done
}

gen() {
  header
  # set -exo pipefail
  cat_src |
    if [[ $mode == deals ]]; then
      cat - | handle_deals
    elif [[ $mode == template ]]; then
      cat - | handle_template
    else
      cat - | handle_matcher
    fi
}

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
main() {
  initialize "$@"
  local dst=${timestamp}_${mode}_gened.csv
  gen | tee $dst
}
main "$@"
