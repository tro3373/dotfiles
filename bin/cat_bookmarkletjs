#!/usr/bin/env bash

readonly ver=3.6.0
cat_jquery_src() {
  cat <<EOF
((d, f, urls, i, s) => {
  urls = [
    '//ajax.googleapis.com/ajax/libs/jquery/$ver/jquery.min.js' /* ,"URL","URL",... */,
  ];
  for (i = 0; i < urls.length; i++) {
    s = d.createElement('script');
    s.src = urls[i];
    if (i == urls.length - 1)
      s.onload = () => {
        f(d, jQuery.noConflict(true));
      };
    d.body.appendChild(s);
  }
})(document, (d, $) => {
  /* 内部コード */
  console.log(\$(d));
});
EOF
}
cat_clip_src() {
  cat <<'EOF'
const clip = (d, s) => {
  const p = d.createElement('pre');
  p.style.webkitUserSelect = 'auto';
  p.style.userSelect = 'auto';
  p.textContent = s;
  d.body.appendChild(p);
  d.getSelection().selectAllChildren(p);
  const r = d.execCommand('copy');
  d.body.removeChild(p);
  return r;
};
EOF
}
cat_dl_src() {
  cat <<'EOF'
const dl = (w, d, name = 'download.csv', list) => {
  const data = list.map((cols) => cols.join(',')).join('\n');
  const bom = new Uint8Array([0xef, 0xbb, 0xbf]);
  const blob = new Blob([bom, data], { type: 'text/csv' });
  const url = (w.URL || w.webkitURL).createObjectURL(blob);
  const a = d.createElement('a');
  a.href = url;
  a.download = name;
  a.click();
  (w.URL || w.webkitURL).revokeObjectURL(url);
};
EOF
}
cat_template() {
  cat <<EOF
javascript:((e,o,l,n,a)=>{for(l=["//ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"],n=0;n<l.length;n++)(a=e.createElement("script")).src=l[n],n==l.length-1&&(a.onload=(()=>{o(e,jQuery.noConflict(!0))})),e.body.appendChild(a)})(document,(document,$)=>{console.log(\$(document));/* 内部コード */})
EOF
}

main() {
  cat_template
}
main "$@"
# cat_jquery_src
