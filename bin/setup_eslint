#!/usr/bin/env bash

#-------------------------------------------------------
# @ see https://blog.ojisan.io/prettier-eslint-cli
#-------------------------------------------------------

command_name=$(basename $0)
git_root=$(get_git_root)
dummy="echo"
vue=0
husky=0
args=()
usage() {
  cat <<EOF

Enable eslint/prettier husky settings

  Usage:
    $command_name [option]
  Options
    -h|--help : Show this usage
    -e        : Excute (default is dry-run mode)
    -k        : With husky
    -v        : With vue pkgs

EOF
}
log() { echo "$(date +"%Y-%m-%d %H:%M:%S") $*" | ink yellow; }
add_args() { args+=("$@"); }
is_dummy() { [[ -n $dummy ]]; }
initialize() {
  while true; do
    [[ -z $1 ]] && break
    case "$1" in
      -h | --help) usage && exit 0 ;;
      -e) dummy= ;;
      -v) vue=1 ;;
      -k) husky=1 ;;
      #-f*|--file*) file=${1#*=} ;;
      #-f|--file) shift && file=$1 ;;
      *) add_args "$1" ;;
    esac
    shift
  done
}
cat_add_scripts() {
  cat <<'EOF'
  "scripts": {
    "lint-fix": "eslint --fix './**/*.{js,vue}' && prettier --write './**/*.{js,vue}'",
  },
EOF
}
cat_husky_settings() {
  cat <<'EOF'
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{js,jsx,vue}": [
      "npm run lint-fix",
      "git add"
    ]
  }
EOF
}

cat_vscode_extensions_recommendations() {
  cat <<'EOF'
{
  "recommendations": [
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint"
  ]
}
EOF
}
setup_vscode_extensions_recommendations() {
  local target_d="$git_root/.vscode"
  local target_f=$target_d/extensions.json
  if [[ -e $target_f ]]; then
    log "==> $target_f is exist. check below contents is already exist."
    return
  fi
  cat_vscode_extensions_recommendations |
    if is_dummy; then
      log "==> Bellow content will be added to $target_f..."
      cat -
    else
      $dummy mkdir -p $target_d
      cat - >$target_f
    fi
}

setup_packages() {
  local pkgs=(eslint eslint-config-prettier prettier)
  # pkgs+=("yarn prettier-eslint-cli prettier-eslint")
  if [[ $husky -eq 1 ]]; then
    pkgs+=("husky" "lint-staged")
  fi
  if [[ $vue -eq 1 ]]; then
    pkgs+=("eslint-plugin-vue" "babel-eslint")
  fi
  log "==> Installing packages.."
  $dummy npm i -D "${pkgs[@]}"
}

setup_package_json() {
  log "==> Bellow settings is needed to package.json."
  cat_add_scripts
  if [[ $husky -eq 1 ]]; then
    log "==> Bellow husky settings also is needed."
    cat_husky_settings
  fi
}

cat_eslint_js() {
  cat <<'EOF'
module.exports = {
  root: true,
  env: {
    es2020: true,
    node: true,
    // browser: true,
  },
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
    parser: 'babel-eslint',
  },
  extends: ['eslint:recommended', 'prettier'],
  overrides: [
    {
      files: ['**/__tests__/*.{j,t}s?(x)', '**/test/*.spec.{j,t}s?(x)'],
      env: {
        jest: true,
      },
    },
  ],
};
EOF
}

setup_eslint_js() {
  local target=$git_root/.eslintrc.js
  if [[ -e $target ]]; then
    log "==> $target is already exist."
    return
  fi
  cat_eslint_js |
    if is_dummy; then
      log "==> Bellow content will be added to $target..."
      cat -
    else
      cat - >$target
    fi
}

cat_prettierrc() {
  cat <<'EOF'
{
  "printWidth": 100,
  "semi": true,
  "singleQuote": true,
  "endOfLine": "lf",
  "trailingComma": "es5",
  "tabWidth": 2
}
EOF
}

setup_prettierrc() {
  local target=$git_root/.prettierrc
  if [[ -e $target ]]; then
    log "==> $target is already exist."
    return
  fi
  cat_prettierrc |
    if is_dummy; then
      log "==> Bellow content will be added to $target..."
      cat -
    else
      cat - >$target
    fi
}

main() {
  initialize "$@"
  setup_packages
  setup_package_json
  setup_eslint_js
  setup_prettierrc
  setup_vscode_extensions_recommendations
}
main "$@"
