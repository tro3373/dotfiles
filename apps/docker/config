#!/usr/bin/env bash

min_ub_release=16.04

uninstall() {
  exe sudo apt-get purge docker-ce
}

is_exist_docker_group() {
  cat </etc/group | grep docker >&/dev/null
}

is_in_docker_group() {
  groups "$USER" | grep docker >&/dev/null
}

mod_user() {
  log "===> add $USER to docker group... "
  # ユーザーを docker グループに追加
  exe sudo usermod -aG docker "$USER"
}

get_dist_version() {
  local version
  version="$(cat </etc/lsb-release | grep RELEASE)"
  version=${version##*=}
  echo "$version"
}

is_supported_ub_release() {
  local version res
  version=$(get_dist_version)
  res=$(echo "$version > $min_ub_release" | bc)
  if [[ $res -eq 1 ]]; then
    # using distribution is higher than min_ub_release.
    # should use package.
    return 0
  else
    # you can install docker from repository.
    return 1
  fi
}

install_docker_via_repository() {
  if ! is_supported_ub_release; then
    not_supported
    return
  fi
  # @see https://docs.docker.com/engine/installation/linux/ubuntu/#install-docker
  # Install packages to allow apt to use a repository over HTTPS:
  exe sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
  # Add Docker’s official GPG key:
  exe 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -'
  # verify
  exe sudo apt-key fingerprint 0EBFCD88
  local use_version_name
  use_version_name=$(lsb_release -cs)
  exe sudo add-apt-repository "\"deb [arch=amd64] https://download.docker.com/linux/ubuntu ${use_version_name} stable\""
  exe sudo apt-get -y update
  exe sudo apt-get -y install docker-ce
  exe sudo docker run hello-world
}

get_latest_version() {
  local p=${1:-compose}
  local _key=/docker/$p/releases/tag/
  curl -fSsL https://github.com/docker/"$p"/releases |
    grep "$_key" |
    sed -e "s,^.*$_key,,g" -e 's,".*,,g' |
    head -1
}

install_via_curl() {
  local m=$1
  local _command_name="docker-$m"
  if ! is_force && [[ -e /usr/local/bin/$_command_name ]]; then
    log "===> Command already exist /usr/local/bin/$_command_name"
    return
  fi
  local v url
  v="$(get_latest_version "$m")"
  url="https://github.com/docker/$m/releases/download/$v/docker-$m-$(uname -s)-$(uname -m)"
  log "===> Installing... $_command_name"
  exe "sudo curl -L $url -o /tmp/$_command_name"
  exe sudo install /tmp/"$_command_name" /usr/local/bin/"$_command_name"
  if [[ $m == "compose" ]]; then
    exe sudo mkdir -p /usr/local/lib/docker/cli-plugins
    exe sudo install /tmp/"$_command_name" /usr/local/lib/docker/cli-plugins/"$_command_name"
  fi
  exe "$_command_name" --version
}

install_common() { not_supported; }
install_arch() {
  install_via_os_default
  def_install docker-compose docker-scout docker-buildx
  if ! is_wsl; then
    exe sudo systemctl enable docker # ログイン時にデーモン実行
    exe sudo systemctl restart docker
  fi
  # install_via_curl machine
  # install_via_curl compose
}
install_msys() { not_supported; }
install_cygwin() { not_supported; }
install_mac() { not_supported; }
install_ubuntu() {
  install_docker_via_repository
  def_install docker-compose-plugin docker-scan-plugin
  # install_via_curl machine
  # install_via_curl compose
}
install_redhat() { not_supported; }
setting_common() { no_settings; }
setting_arch() {
  if ! is_exist_docker_group; then
    exe sudo groupadd docker
  fi
  if is_in_docker_group; then
    return
  fi
  exe sudo gpasswd -a "$USER" docker
}
setting_msys() { no_settings; }
setting_cygwin() { no_settings; }
setting_mac() { no_settings; }
setting_ubuntu() {
  if is_in_docker_group; then
    return
  fi
  mod_user
}
setting_redhat() { no_settings; }

# install_common() { not_supported; }
# install_arch()   { not_supported; }
# install_msys()   { not_supported; }
# install_cygwin() { not_supported; }
# install_mac()    { not_supported; }
# install_ubuntu() { not_supported; }
# install_redhat() { not_supported; }
# setting_common() { no_settings; }
# setting_arch()   { no_settings; }
# setting_msys()   { no_settings; }
# setting_cygwin() { no_settings; }
# setting_mac()    { no_settings; }
# setting_ubuntu() { no_settings; }
# setting_redhat() { no_settings; }
# #is_installed
# #install_via_os_default
# #def_install
# #is_debug
# #is_dry
# #log
# #dlog
# #not_supported
# #make_link_dot2home
# #make_lnk_with_bkup
# #cd_work
# #make_work_if_needed
# #dl
# #dl_unzip
# #dl_untar
# #github
# #github_user_local
