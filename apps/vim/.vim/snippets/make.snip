# https://qiita.com/Syoitu/items/8e7e3215fb7ac9dabc3a
# https://qiita.com/keitakn/items/f46347f871083356149b
snippet	mkfile_path
	mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))

snippet	current_dir
	mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
	current_dir := $(patsubst %/,%,$(dir $(mkfile_path)))

snippet	go_module_name
alias	nameeee
	name := $(shell grep module $(current_dir)/go.mod|head -1|sed -e 's,^.*/,,g')

# https://qiita.com/chibi929/items/b8c5f36434d5d3fbfa4a
snippet	scriptpathhh
	$(abspath $(lastword $(MAKEFILE_LIST)))

snippet	scriptdirrr
	mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
	# $(patsubst PATTERN,REPLACEMENT,TEXT)
	current_dir := $(patsubst %/,%,$(dir $(mkfile_path)))

# snippet	local_ip
# 	export local_ip := $(shell ip route |grep kernel |grep -v linkdown |grep -v 'br-' |sed -e 's,.metric.*,,g' |awk 'END {print $$NF}')
snippet	local_ip
	export local_ip := $(shell (ip route 2>/dev/null |grep kernel |grep -v linkdown |grep -v 'br-' || echo localhost) |sed -e 's,.metric.*,,g' |awk 'END {print $$NF}')
# snippet local_ip_if_exist
# 	export local_ip := $(shell if command -v ip >/dev/null; then ip route |grep kernel |grep -v linkdown |grep -v 'br-' |sed -e 's,.metric.*,,g' |awk 'END {print $$NF}'; else echo localhost; fi)
snippet local_ip_in_host
	export local_ip := $(shell if [ ! -e /.dockerenv ]; then ip route |grep kernel |grep -v linkdown |grep -v 'br-' |sed -e 's,.metric.*,,g' |awk 'END {print $$NF}'; else echo localhost; fi)

snippet	docker_none_images
	docker_none_images=$$(docker images | awk '/^<none>/ { print $$3 }')
snippet	docker_all_container
	docker_all_container=$$(docker ps -a -q)
snippet	docker_active_container
	docker_active_container=$$(docker ps -q)

snippet	checkkk
	depends_cmds := ${1:#command names for check}
	.PHONY: check
	check:
		@for cmd in ${depends_cmds}; do command -v $$cmd >&/dev/null || (echo "No $$cmd command" && exit 1); done

snippet	shellbinbashhhh
	SHELL := /bin/bash

snippet	current_goalsss
	@echo "==> $@ $(STAGE)" && \
snippet	goalsss
	@echo "==> $(MAKECMDGOALS) $(STAGE)" && \

snippet	creannn
	@for d in node_modules dist; do if [[ -e $${d} ]]; then echo "==> Removing $${d}.." && rm -rf $${d}; fi done

snippet	timestamppp
	timestamp := $(shell date '+%Y%m%d.%H%M%S')

snippet	taggg
	SERVICE := api
	TIMESTAMP := $(shell date '+%Y%m%d.%H%M%S')
	tag:
		@tag="Release_${SERVICE}_${TIMESTAMP}" && git tag "$$tag" && echo "==> $$tag tagged."
snippet	tagvvv
	export APP_VER := 1.0.0
	tag:
		@tag="v${APP_VER}" && git tag "$$tag" && echo "==> $$tag tagged."
snippet	ownerrr
	export OWNER := $(if $(OWNER),$(OWNER),$(shell git config --get remote.origin.url |sed -e 's,^.*:,,g' -e 's,/.*,,g'))

snippet	defaulttt
	.DEFAULT_GOAL := build

snippet	ifeqqqq
	ifeq ($(STAGE),dev)
		VAULT := $(VAULT_DEV)
	else
		VAULT := $(VAULT_PRD)
	endif

snippet	variable_argssss
	_subcommand-%:
		_subcommand ${*}

snippet	docker_user
	docker_user := "$(shell id -u):$(shell id -g)"

snippet	phony
	.PHONY: ${1}

snippet fzff
	fzf -m "$query" \
	--preview 'head -100 {}' \
	--select-1 \
	--exit-0 \
	--bind 'ctrl-l:toggle-all,ctrl-g:toggle-preview,ctrl-y:execute-silent(echo {} |clip)+abort'

snippet path
	export PATH := $(PWD)/bin:$(PATH)


snippet	ngrok
	ngrok-url:
		@curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'
	ngrok-start:
		@(pgrep ngrok >& /dev/null && echo ">> ngrok already running") || (echo ">> Starting ngrok.." && (nohup ngrok http 3000 >& /dev/null &) && (sleep 2))
	ngrok-stop:
		@pgrep ngrok || (echo ">> ngrok not running" && exit 1)
		@echo ">> Stopping ngrok.."
		@pgrep ngrok | xargs kill -9
		@echo ">> ngrok stopped"
	ngrok: ngrok-start ngrok-url
