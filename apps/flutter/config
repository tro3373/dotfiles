#!/usr/bin/env bash

# shellcheck disable=SC2154
# is_installed() { [[ -e "$workdir"/flutter ]]; }
install_common() {
  # cd_work
  # if [[ ! -e flutter ]]; then
  #   exe git clone https://github.com/flutter/flutter.git -b stable --depth 1
  # fi
  # def_install clang cmake ninja
  if ! has asdf; then
    add_dependency_args asdf sdkmanager
    return
  fi
  if ! asdf plugin list | grep flutter >&/dev/null; then
    exe asdf plugin-add flutter
  fi
  exe asdf install flutter latest
  if ! flutter version >&/dev/null; then
    exe asdf global flutter "$(asdf list flutter | tail -n 1)"
  fi
}
install_arch() {
  def_install cmake ninja
  install_common
}
# install_msys() { not_supported; }
install_cygwin() { not_supported; }
# install_mac() { not_supported; }
# install_ubuntu() { not_supported; }
install_redhat() { not_supported; }
setting_common() {
  # cd_work
  # local flutter_bin=$(pwd)/flutter/bin
  # if ! grep $flutter_bin ~/.works.zsh >&/dev/null; then
  #   exe "echo 'add_path $flutter_bin' >> ~/.works.zsh"
  #   rm_dotpath
  # fi
  # exe $flutter_bin/flutter precache
  # exe $flutter_bin/flutter doctor

  # Cache flutter tools
  exe flutter precache
  exe flutter doctor
}
setting_arch() {
  if has google-chrome-stable; then
    cat <<EOF | tee_to_works_zsh
export CHROME_EXECUTABLE=$(which google-chrome-stable)
EOF
  fi
  setting_common
}
# setting_msys() { no_settings; }
setting_cygwin() { no_settings; }
setting_mac() {
  setting_common
  # if [[ -e /Applications/Xcode.app ]]; then
  #   exe sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
  #   exe sudo xcodebuild -runFirstLaunch
  #   exe sudo xcodebuild -license
  # fi
}
# setting_ubuntu() { no_settings; }
setting_redhat() { no_settings; }
#is_installed
#install_via_os_default
#def_install
#is_debug
#is_dry
#log
#dlog
#not_supported
#make_link_dot2home
#make_lnk_with_bkup
#cd_work
#make_work_if_needed
#dl
#dl_unzip
#dl_untar
#github
#github_user_local
#sudo_tee
