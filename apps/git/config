#!/bin/bash

install_arch() {
  install_via_os_default
  def_install perl-term-readkey
}

setup_username() {
  log "@@@@@ Input Your Git user.name"
  read -r gitusername
  if [ ! "$gitusername" = "" ]; then
    exe git config --global user.name "$gitusername"
  else
    log "  => Do Nothing for git user.name"
  fi
}

setup_email() {
  log "@@@@@ Input Your Git user.email"
  read -r gituseremail
  if [ ! "$gituseremail" = "" ]; then
    exe git config --global user.email "$gituseremail"
  else
    log "  => Do Nothing for git user.email"
  fi
}

cat_git_configs() {
  cat_git_configs_dynamic
  cat_git_configs_fixed
}

cat_git_configs_dynamic() {
  local _editor=vim
  if is_msys; then
    local _target=/home/joker/win/scoop/shims/gvim.exe
    if [[ -e $_target ]]; then
      _editor=$_target
    fi
  fi
  cat <<EOF
# git config --global core.editor "$_editor --remote-tab-wait-silent -f -c 'set fenc=utf-8'"
git config --global core.editor "vim -c 'set fenc=utf-8'"
EOF
}
cat_git_configs_fixed() {
  cat <<'EOF'
git config --global user.name sample_username
git config --global user.email sample_email@domain.com
git config --global core.symlinks true
git config --global core.quotepath false
git config --global core.preloadindex true
git config --global core.fscache true
git config --global core.filemode true
git config --global core.autocrlf false
git config --global color.ui auto
git config --global http.sslverify false
git config --global push.default simple
git config --global pull.rebase true
git config --global rerere.enabled true
git config --global fetch.prune true
git config --global --add merge.ff false
git config --global rebase.autostash true
git config --global init.defaultbranch main
git config --global init.templatedir '~/.git_template'
git config --global commit.template ~/.gitmessage
git config --global alias.co checkout
git config --global alias.sw switch
git config --global alias.rs restore
git config --global alias.cm commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.ch cherry-pick
git config --global alias.d "diff --color-moved=dimmed_zebra"
git config --global alias.lgo "log --oneline"
git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
git config --global alias.lga "log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
git config --global alias.tar "archive --format=tar HEAD -o"
git config --global alias.tgz "archive --format=tgz HEAD -o"
git config --global alias.zip "archive --format=zip HEAD -o"
git config --global alias.or orphan
git config --global alias.ignore '!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi'
git config --global alias.c '!git_commit'
EOF
}

setting_common() {
  # shellcheck disable=SC2154
  make_lnk_with_bkup "$app_dir/git" "${HOME}/.config/git"
  make_link_dot2home
  local usrn=0 mail=0 list
  list="$(_current_git_config_list_global)"
  while read -r line; do
    [[ -z $line ]] && continue
    [[ $line =~ ^#.* ]] && continue

    local key
    key=$(echo "$line" | sed -e 's,^.\+global ,,g' -e 's,--add ,,g' -e 's, .\+,,g')
    # echo "$(printf "% -20s" $key) <== $line"
    if echo -e "$list" | grep "$key=" >&/dev/null; then
      # already configed.
      continue
    fi

    case "$key" in
      user.name)
        is_dry && is_additional && exe "$line" && continue
        usrn=1
        ;;
      user.email)
        is_dry && is_additional && exe "$line" && continue
        mail=1
        ;;
      core.filemode)
        local filemode=true
        is_msys && filemode=false
        exe git config --global core.filemode $filemode
        ;;
      *)
        exe "$line"
        ;;
    esac
  done < <(cat_git_configs)

  # shellcheck disable=SC2154
  [[ $additional -ne 1 ]] && return
  if [[ -t 1 ]]; then
    if [[ $usrn -eq 1 ]]; then
      setup_username
    fi
    if [[ $mail -eq 1 ]]; then
      setup_email
    fi
  fi
}

_current_git_config_list_global() {
  if [[ ! -e $HOME/.gitconfig ]]; then
    return
  fi
  git config --list --global 2>/dev/null
}

setting_msys() {
  setting_common
  [[ -e $HOME/win/.gitconfig ]] && return
  # for gitbash/scoop
  make_link "$HOME"/.gitconfig "$HOME"/win/.gitconfig
}

# setting_common() {
#     make_link_dot2home
#     local list="$(git config --list)"
#     if ! is_exists_setting "$list" "user.name"; then
#         log "@@@@@ Input Your Git user.name"
#         read gitusername
#         if [ ! "$gitusername" = "" ]; then
#             exe git config --global user.name "$gitusername"
#         else
#             log "  => Do Nothing for git user.name"
#         fi
#     fi
#     if ! is_exists_setting "$list" "user.email"; then
#         log "@@@@@ Input Your Git user.email"
#         read gituseremail
#         if [ ! "$gituseremail" = "" ]; then
#             exe git config --global user.email "$gituseremail"
#         else
#             log "  => Do Nothing for git user.email"
#         fi
#     fi
#     # Git Global 設定
#     set_gitconfig
# }
#
# set_gitconfig() {
#     local list="$(git config --list)"
#     if ! is_exists_setting "$list" "core.editor"; then
#         exe "git config --global core.editor \"vim -c 'set fenc=utf-8'\""
#     fi
#     if ! is_exists_setting "$list" "core.quotepath"; then
#         exe git config --global core.quotepath false
#     fi
#     if ! is_exists_setting "$list" "color.ui"; then
#         exe git config --global color.ui auto
#     fi
#     if ! is_exists_setting "$list" "push.default"; then
#         exe git config --global push.default simple
#     fi
#     if ! is_exists_setting "$list" "http.sslverify"; then
#         exe git config --global http.sslVerify false
#     fi
#     if ! is_exists_setting "$list" "core.preloadindex"; then
#         exe git config --global core.preloadindex true
#     fi
#     if ! is_exists_setting "$list" "core.fscache"; then
#         exe git config --global core.fscache true
#     fi
#     if ! is_exists_setting "$list" "core.filemode"; then
#         local filemode=true
#         is_msys && filemode=false
#         exe git config --global core.filemode $filemode
#     fi
#     if ! is_exists_setting "$list" "alias.co"; then
#         exe git config --global alias.co checkout
#     fi
#     if ! is_exists_setting "$list" "alias.cm"; then
#         exe git config --global alias.cm commit
#     fi
#     if ! is_exists_setting "$list" "alias.st"; then
#         exe git config --global alias.st status
#     fi
#     if ! is_exists_setting "$list" "alias.br"; then
#         exe git config --global alias.br branch
#     fi
#     if ! is_exists_setting "$list" "alias.lgo"; then
#         exe "git config --global alias.lgo \"log --oneline\""
#     fi
#     if ! is_exists_setting "$list" "alias.lg"; then
#         exe "git config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\""
#     fi
#     if ! is_exists_setting "$list" "alias.lga"; then
#         exe "git config --global alias.lga \"log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\""
#     fi
#     if ! is_exists_setting "$list" "alias.tar"; then
#         exe "git config --global alias.tar \"archive --format=tar HEAD -o\""
#     fi
#     if ! is_exists_setting "$list" "alias.tgz"; then
#         exe "git config --global alias.tgz \"archive --format=tgz HEAD -o\""
#     fi
#     if ! is_exists_setting "$list" "alias.zip"; then
#         exe "git config --global alias.zip \"archive --format=zip HEAD -o\""
#     fi
#     if ! is_exists_setting "$list" "alias.or"; then
#         exe git config --global alias.or orphan
#     fi
#     if ! is_exists_setting "$list" "init.templatedir"; then
#         exe git config --global init.templatedir '~/.git_template'
#     fi
#     if ! is_exists_setting "$list" "alias.ignore"; then
#         exe "git config --global alias.ignore '!gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}; gi'"
#     fi
#     if ! is_exists_setting "$list" "commit.template"; then
#         exe "git config --global commit.template ~/.gitmessage"
#     fi
# }

is_exists_setting() {
  echo -e "$1" | grep "$2=" >/dev/null 2>&1
  return $?
}

# get_gitsettingcnt() {
#     target=$1
#     count=`git config --list |grep $target |wc -l`
#     return $count
# }
#
# execGitConfigForce() {
#     git config --global user.name sample_username
#     git config --global user.email sample_email@domain.com
#     git config --global core.editor "vim -c 'set fenc=utf-8'"
#     git config --global core.quotepath false
#     git config --global color.ui auto
#     git config --global push.default simple
#     git config --global http.sslVerify false
#     git config --global core.preloadindex true
#     git config --global core.fscache true
#     git config --global core.filemode true
#     git config --global alias.co checkout
#     git config --global alias.cm commit
#     git config --global alias.st status
#     git config --global alias.br branch
#     git config --global alias.lgo "log --oneline"
#     git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
#     git config --global alias.lga "log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
#     git config --global alias.tar "archive --format=tar HEAD -o"
#     git config --global alias.tgz "archive --format=tgz HEAD -o"
#     git config --global alias.zip "archive --format=zip HEAD -o"
#     git config --global alias.or orphan
#     git config --global init.templatedir '~/.git_template'
#     git config --global alias.ignore '!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi'
#     git config --global commit.template ~/.gitmessage
# }
# main() {
#     local list="$(git config --list --global)"
#     while read -r line; do
#         [[ -z $line ]] && continue
#         [[ $line =~ ^#.* ]] && continue
#         local key=$(echo "$line" |sed -e 's,^.\+global ,,g' -e 's, .\+,,g')
#         if echo -e "$list" |grep "$key=" >& /dev/null; then
#             # already configed.
#             continue
#         fi
#
#         case "$key" in
#             user.name)
#                 is_dry && exe "$line" && continue
#                 log "@@@@@ Input Your Git user.name"
#                 read gitusername
#                 if [ ! "$gitusername" = "" ]; then
#                     exe git config --global user.name "$gitusername"
#                 else
#                     log "  => Do Nothing for git user.name"
#                 fi
#                 ;;
#             user.email)
#                 is_dry && exe "$line" && continue
#                 log "@@@@@ Input Your Git user.email"
#                 read gituseremail
#                 if [ ! "$gituseremail" = "" ]; then
#                     exe git config --global user.email "$gituseremail"
#                 else
#                     log "  => Do Nothing for git user.email"
#                 fi
#                 ;;
#             core.filemode)
#                 local filemode=true
#                 is_msys && filemode=false
#                 exe git config --global core.filemode $filemode
#             *)
#                 exe "$line"
#                 ;;
#         esac
#
#         echo "$(printf "% -20s" $key) ==> $line"
#     done <<'EOF'
# git config --global user.name sample_username
# git config --global user.email sample_email@domain.com
# git config --global core.editor "vim -c 'set fenc=utf-8'"
# git config --global core.quotepath false
# git config --global color.ui auto
# git config --global push.default simple
# git config --global http.sslVerify false
# git config --global core.preloadindex true
# git config --global core.fscache true
# git config --global core.filemode true
# git config --global alias.co checkout
# git config --global alias.cm commit
# git config --global alias.st status
# git config --global alias.br branch
# git config --global alias.lgo "log --oneline"
# git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
# git config --global alias.lga "log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
# git config --global alias.tar "archive --format=tar HEAD -o"
# git config --global alias.tgz "archive --format=tgz HEAD -o"
# git config --global alias.zip "archive --format=zip HEAD -o"
# git config --global alias.or orphan
# git config --global init.templatedir '~/.git_template'
# git config --global alias.ignore '!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi'
# git config --global commit.template ~/.gitmessage
# EOF
# }
# main
