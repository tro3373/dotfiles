#!/usr/bin/env -S bash -e

find_cursor_bin() {
  local cursor_bin=/opt/cursor/usr/share/cursor/cursor
  if [[ -x $cursor_bin ]]; then
    echo "$cursor_bin"
    return
  fi
  if ! os mac; then
    find "$HOME"/tools/ -name "cursor-*.AppImage" | sort -r | head -1
    return
  fi
  cursor_bin=/Applications/Cursor.app/Contents/Resources/app/bin/cursor
  if [[ -x $cursor_bin ]]; then
    echo "$cursor_bin"
    return
  fi
  echo "==> warn: $cursor_bin is not installed. Install from Cursor gui" 1>&2
  echo "/Applications/Cursor.app/Contents/MacOS/Cursor"
}

is_process_already_exists() {
  pgrep -f "$*" >/dev/null
}

start_cursor() {
  "$cursor_bin" "$@" >>/tmp/cursor.log 2>&1 &
}

closest_dirname() {
  if [[ -d $1 ]]; then
    echo "$1"
    return
  fi
  dirname "$1"
}

closest_root_dirname() {
  # search_names=("package.json" "go.mod" ".git" ".hg" ".svn")
  search_names=(".git")
  start_dir=$(closest_dirname "$1")
  dir="$start_dir"
  for name in "${search_names[@]}"; do
    if [[ -e "$dir/$name" ]]; then
      echo "$dir"
      return
    fi
    dir=$(dirname "$dir")
  done
}

get_root_dir() {
  if [[ $# -eq 0 ]]; then
    git rev-parse --show-toplevel 2>/dev/null || pwd
    return
  fi
  cd "$(closest_root_dirname "$1")"
  pwd
}

main() {
  cursor_bin=$(find_cursor_bin)
  if [[ $# -eq 0 ]]; then
    # if no arguments are passed, start cursor in the current directory or the git root
    start_cursor "$(get_root_dir)"
    return
  fi

  if [[ $1 =~ ^-.*$ ]]; then
    # if the first argument is an option, then call the cursor binary as is
    "$cursor_bin" "$@"
    return
  fi

  if ! is_process_already_exists "$cursor_bin"; then
    # if cursor is not running, start it with the first argument
    start_cursor "$(get_root_dir "$1")"
    sleep 0.5
  fi
  start_cursor "$@"
}
main "$@"
