# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/customizing-atom#customizing-key-bindings
# * https://atom.io/docs/latest/advanced/keymaps
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson
'atom-text-editor':
  'f2': 'find-and-replace:show'
'atom-workspace':
  'shift-ctrl-down': 'multi-cursor:expandDown'
  'shift-ctrl-right': 'multi-cursor:skipDown'
  'shift-ctrl-left': 'multi-cursor:skipUp'
  'shift-ctrl-up': 'multi-cursor:expandUp'
'.platform-win32 .editor, .platform-linux .editor':
  'ctrl-shift-L': 'editor:split-selections-into-lines'
'atom-workspace, atom-workspace atom-text-editor':
  'shift-ctrl-alt-M': 'markdown-preview:toggle'
# emulate vim ex-mode
# https://github.com/atom/vim-mode/issues/50
'.editor.vim-mode-plus:not(.insert-mode)':
  ': w enter': 'core:save'
  ': q enter': 'core:close'
  'space c': 'editor:toggle-line-comments' # emulate tomtom/tcooment_vim
  # 's s enter': 'pane:split-down'
  # 's v enter': 'pane:split-right'
  # 's t': 'atom-vim-like-tab:new' # mean 'tab create'
  # 's p': 'atom-vim-like-tab:previous'
  # 's n': 'atom-vim-like-tab:next'
  # 'space t': 'atom-vim-like-tab:list'
  # ': t a b c': 'atom-vim-like-tab:close'
